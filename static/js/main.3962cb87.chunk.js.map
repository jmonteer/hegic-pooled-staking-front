{"version":3,"sources":["contracts/useContract.js","utils.js","context/Wallet.js","components/tabs/yourSharesTab.js","components/tabs/depositTab.js","components/tabs/statsTab.js","context/Pool.js","components/dashboard.js","components/header.js","components/intro.js","connectors.js","App.js","hooks.js","serviceWorker.js","index.js"],"names":["getContract","address","ABI","library","account","ethers","Contract","getSigner","useContract","withSignerIfPossible","useWeb3React","useMemo","undefined","error","console","useStakingPoolContract","STAKING_POOL_ABI","useHegicContract","HEGIC_ABI","truncateEtherValue","str","maxDecimalDigits","includes","parts","split","slice","formatBN","bn","utils","commify","formatEther","toString","WalletContext","createContext","context","balances","allowances","connect","disconnect","YourSharesTab","wallet","useContext","stakingPool","chainId","Asset","parseEther","useState","BigNumber","from","profitETH","setProfitETH","profitWBTC","setProfitWBTC","statusMsg","setStatusMsg","claimButtonDisabled","setClaimButtonDisabled","amountToWithdraw","setAmountToWithdraw","withdrawButtonEnabled","setWithdrawButtonEnabled","useEffect","status","lte","sHEGICBalance","value","waitAndUpdate","txRequest","a","style","color","target","href","hash","wait","claimProfit","claimAllProfit","profitOf","then","profit","isZero","withdrawHegic","amount","withdraw","claimProfitAndWithdrawAll","claimProfitAndWithdraw","StatusMsg","Alert","Row","Col","sm","Card","body","CardTitle","display","flexDirection","textAlign","width","className","formatUnits","Button","marginTop","fontWeight","fontFamily","letterSpacing","background","borderImageSource","borderImageSlice","borderStyle","boxSizing","borderRadius","borderImageWidth","disabled","onClick","fontSize","Badge","InputGroup","Input","placeholder","onChange","event","InputGroupAddon","addonType","borderColor","InputGroupText","DepositTab","HEGIC","totalBalance","setTotalBalance","setLockedBalance","allowanceIsZero","setAllowanceIsZero","totalNumberOfStakingLots","setTotalNumberOfStakingLots","numberOfStakingLotsETH","setNumberOfStakingLotsETH","numberOfStakingLotsWBTC","setNumberOfStakingLotsWBTC","amountToDeposit","setAmountToDeposit","depositButtonEnabled","setDepositButtonEnabled","HEGICBalance","HEGICAllowance","balance","lockedBalance","n","toNumber","numberOfStakingLots","allow","amountToAllow","approve","depositHegic","deposit","CardText","margin","padding","lineHeight","StatsTab","setEthTotalBalance","setEthLockedBalance","setEthNumberOfStakingLots","setFeeRecipient","x","FEE_RECIPIENT","PoolContext","lots","Dashboard","STAKING_ETH_ABI","STAKING_WBTC_ABI","WBTC_ABI","setValue","activeTab","setActiveTab","toggle","tab","Container","md","size","offset","Nav","tabs","justifyContent","borderBottom","NavItem","NavLink","classnames","active","TabContent","Provider","TabPane","tabId","marginBottom","Header","props","getBalance","ETHBalance","balanceOf","allowance","filter_inputs","topics","id","hexZeroPad","filter_outputs","filter_approve","filter_profit","on","log","Wallet","zIndex","len","length","substring","truncateAddress","Navbar","backgroundColor","Intro","minHeight","textTransform","injected","InjectedConnector","supportedChainIds","getLibrary","provider","connector","providers","Web3Provider","App","setETHBalance","setHEGICBalance","setSHEGICBalance","activate","deactivate","activatingConnector","setActivatingConnector","suppress","ethereum","window","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","catch","useEagerConnect","backgroundImage","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3962cb87.chunk.js","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { useMemo } from 'react'\nimport { ethers } from 'ethers'\n\nimport { abi as STAKING_POOL_ABI } from './json/HegicStakingPool.json'\nimport { abi as STAKING_ETH_ABI } from './json/FakeHegicStakingETH.json'\nimport { abi as STAKING_WBTC_ABI } from './json/FakeHegicStakingWBTC.json'\nimport { abi as HEGIC_ABI } from './json/FakeHEGIC.json'\nimport { abi as WBTC_ABI } from './json/FakeWBTC.json'\n\n// TEST1 CONTRACTS\n// const POOLED_STAKING_ETH_ADDRESS = '0x47B7C230E8624eB598046DB751A7abDE891df95a'\n// const POOLED_STAKING_WBTC_ADDRESS = '0xa3ae456c6b1487f1C0dB5592C72eAcD7DC1759fe'\n// const STAKING_ETH_ADDRESS = '0xdDEA8F9e69B05C1aAbeeb58d221652A3B92d613C'\n// const HEGIC_ADDRESS = '0xaA2A5976a9E9D3d6E4664145F97105881C16c0B9'\n\n// // FAKE CONTRACTS\n// const STAKING_POOL_ADDRESS = '0xb61D0128378DFe45722F9823ba4AB5a3935Ba640'\n// const STAKING_ETH_ADDRESS = '0xdDEA8F9e69B05C1aAbeeb58d221652A3B92d613C'\n// const STAKING_WBTC_ADDRESS = '0x54633aCF8aFF9039Fb632393D4194Ba29a825F42'\n// const HEGIC_ADDRESS = '0xaA2A5976a9E9D3d6E4664145F97105881C16c0B9'\n// const WBTC_ADDRESS = '0xBDD29c702f0414F19bB5576b46c0811C3A7a7033'\n\n//mainnet contracts\nconst STAKING_POOL_ADDRESS = '0xf4128B00AFdA933428056d0F0D1d7652aF7e2B35'\nconst STAKING_ETH_ADDRESS = '0x1Ef61E3E5676eC182EED6F052F8920fD49C7f69a'\nconst STAKING_WBTC_ADDRESS = '0x840a1ae46b7364855206eb5b7286ab7e207e515b'\nconst HEGIC_ADDRESS = '0x584bC13c7D411c00c01A62e8019472dE68768430'\nconst WBTC_ADDRESS = '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599'\n\n// returns null on errors\nfunction getContract(address, ABI, library, account) {\n    return new ethers.Contract(address, ABI, library.getSigner(account))\n}\n\nfunction useContract(address, ABI, withSignerIfPossible = true) {\n    const { library, account } = useWeb3React()\n  \n    return useMemo(() => {\n      if (!address || !ABI || !library) return null\n      try {\n        return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n      } catch (error) {\n        console.error('Failed to get contract', error)\n        return null\n      }\n    }, [address, ABI, library, withSignerIfPossible, account])\n  } \n\nexport function useStakingPoolContract() {\n    return useContract(STAKING_POOL_ADDRESS, STAKING_POOL_ABI);\n}\n\nexport function useStakingETHContract() {\n  return useContract(STAKING_ETH_ADDRESS, STAKING_ETH_ABI);\n}\n\nexport function useStakingWBTCContract() {\n  return useContract(STAKING_WBTC_ADDRESS, STAKING_WBTC_ABI);\n}\n\nexport function useHegicContract() {\n  return useContract(HEGIC_ADDRESS, HEGIC_ABI);\n}\n\nexport function useWBTCContract() {\n  return useContract(WBTC_ADDRESS, WBTC_ABI);\n}","import { ethers } from 'ethers'\n\nconst truncateEtherValue = (str, maxDecimalDigits) => {\n    if (str.includes(\".\")) {\n    const parts = str.split(\".\");\n    return parts[0] + \".\" + parts[1].slice(0, maxDecimalDigits);\n    }\n    return str;\n};\n\nconst formatBN = (bn) => {\n    return ethers.utils.commify(ethers.utils.formatEther(bn.toString()));\n}\n\nconst truncateAddress = (str) => {\n    const len = str.length;\n    return str.substring(0, 8) + '...' + str.substring(len-7, len-1);\n}\n\nexport {\n    truncateEtherValue,\n    formatBN, \n    truncateAddress\n}","import { createContext } from 'react';\n\nconst WalletContext = createContext(\n    {\n        context: {},\n        balances: {},\n        allowances: {},\n        connect: () => {},\n        disconnect: () => {}\n    });\n\nexport {\n    WalletContext\n};\n\n","// import { useWeb3React } from '@web3-react/core';\nimport React, { useState, useEffect, useContext } from 'react'\nimport { useStakingPoolContract } from '../../contracts/useContract';\nimport { CardTitle, Row, Badge, Col, Card, Input, InputGroup, InputGroupAddon, InputGroupText, Button, CardText, Alert } from 'reactstrap'\nimport { ethers } from 'ethers'\nimport { truncateEtherValue, formatBN } from '../../utils'\nimport { WalletContext } from '../../context/Wallet'\n\nfunction YourSharesTab () {\n    // const {account, library, chainId } = useWeb3React();\n    const wallet = useContext(WalletContext);\n    const {account, library, chainId } = wallet.context;\n\n    const stakingPool = useStakingPoolContract();\n    const LOT_PRICE = ethers.utils.parseEther('888000');\n    const Asset = {WBTC: 0, ETH: 1}\n    const [profitETH, setProfitETH] = useState(ethers.BigNumber.from('0'));\n    const [profitWBTC, setProfitWBTC] = useState(ethers.BigNumber.from('0'));\n    const [statusMsg, setStatusMsg] = useState('');\n    const [claimButtonDisabled, setClaimButtonDisabled] = useState(false);\n    const [amountToWithdraw, setAmountToWithdraw] = useState('');\n    const [withdrawButtonEnabled, setWithdrawButtonEnabled] = useState(false);\n\n    useEffect(() => {\n        let status = true;\n        status = status && (amountToWithdraw > 0 || amountToWithdraw == '');\n        if(amountToWithdraw != '')  \n            status = status && ethers.utils.parseEther(amountToWithdraw).lte(wallet.balances.sHEGICBalance.value);\n        setWithdrawButtonEnabled(status);\n    }, [wallet.balances.sHEGICBalance, amountToWithdraw])\n\n    const waitAndUpdate = async (txRequest) => {\n        setStatusMsg( (<a style={{color:'#19274d'}} target='_blank' href={`https://rinkeby.etherscan.io/tx/${txRequest.hash}`}>Pending transaction {txRequest.hash}</a> ) );\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const claimProfit = async () => {\n        const txRequest = await stakingPool.claimAllProfit({from: account});\n        setClaimButtonDisabled(true);\n        await waitAndUpdate(txRequest)\n    }\n\n    useEffect(() => {\n        if (!!account && !!library) {\n            stakingPool.profitOf(account, Asset.ETH).then(profit => {\n                setProfitETH(profit);\n                if(profit.isZero())\n                    setClaimButtonDisabled(true);\n            })\n            stakingPool.profitOf(account, Asset.WBTC).then(profit => {\n                setProfitWBTC(profit);\n                if(profit.isZero())\n                    setClaimButtonDisabled(true);\n            })\n        }\n    }, [wallet.balances]);\n\n    const withdrawHegic = async () => {\n        let amount;\n        if(amountToWithdraw == '') \n            amount = wallet.balances.sHEGICBalance.value\n        else \n            amount = ethers.utils.parseEther(amountToWithdraw); \n        const txRequest = await stakingPool.withdraw(amount);\n        setAmountToWithdraw(0);\n        await waitAndUpdate(txRequest);\n    }\n\n    const claimProfitAndWithdrawAll = async () => {\n        const txRequest = await stakingPool.claimProfitAndWithdraw();\n        setAmountToWithdraw(0);\n        await waitAndUpdate(txRequest);\n    }\n    \n    const withdrawMax = () => {\n        setAmountToWithdraw(ethers.utils.formatEther(wallet.balances.sHEGICBalance.value));\n    }\n\n    const StatusMsg = () => {\n        return (\n            <>\n            <br />\n            { statusMsg ? (\n                <Alert color=\"primary\">\n                    {statusMsg}\n                </Alert> \n            ) : null }\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Row>\n                <Col sm=\"12\">\n                    <Card body >\n                        <CardTitle><h3>Your Shares & Profit</h3></CardTitle>\n                        <h5>Your Profit</h5>\n                        <div style={{\n                            display:'flex',\n                            flexDirection:'column',\n                            textAlign:'center'}}>\n                            <div style={{\n                                    width:'100%',\n                                    display: 'flex',\n                                    flexDirection:'row',\n                                    textAlign:'center'\n                                }}>\n                                <div className=\"profit-info-box eth\">\n                                        <b>Your ETH profit:</b>\n                                        {truncateEtherValue(formatBN(profitETH), 4)} ETH\n                                        <br /> \n                                </div>\n                                <div className=\"profit-info-box wbtc\">\n                                        <b>Your WBTC profit:</b>\n                                        {truncateEtherValue(ethers.utils.commify(ethers.utils.formatUnits(profitWBTC, 8)), 4)} ETH\n                                        <br /> \n                                </div>\n                            </div>\n                                <Button style={{\n                                    marginTop:'5px',\n                                    width: 'auto',\n                                    color:'#15203d',\n                                    fontWeight:'bold',\n                                    fontFamily:'Jura',\n                                    letterSpacing:'.1em',\n                                    background:'transparent',\n                                    borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                                    borderImageSlice:'20',\n                                    borderStyle:'solid',\n                                    boxSizing:'border-box',\n                                    borderRadius:'2px',\n                                    borderImageWidth:'50px'}} disabled={claimButtonDisabled} onClick={claimProfit}>\n                                        CLAIM PROFIT\n                                    </Button>\n                                    <span style={{fontSize:'12px', color:'#667fcc'}}>A performance fee (5% of profit) applies.</span>                             \n                            </div>\n                            <StatusMsg />\n                            <br />\n                            <h5>Your share  <Badge color=\"primary\" style={{fontSize:'9pt'}}>You have {truncateEtherValue(formatBN(wallet.balances.sHEGICBalance.value),2)} sHEGIC</Badge></h5>                    \n\n                            <InputGroup>\n                            <Input placeholder={formatBN(wallet.balances.sHEGICBalance.value)} \n                            value={amountToWithdraw}\n                            onChange={(event) => {\n                                setAmountToWithdraw(event.target.value)\n                            }}/>\n                            <InputGroupAddon addonType='append'>\n                            <Button style={{\n                                fontWeight:'bold',\n                                fontFamily:'Jura',\n                                letterSpacing:'.1em',\n                                background:'transparent',\n                                borderColor:'#45fff4',\n                                borderImageSlice:'20',\n                                borderStyle:'solid',\n                                boxSizing:'border-box',\n                                borderRadius:'2px',\n                                borderImageWidth:'50px'}} onClick={withdrawMax}>MAX</Button>\n                            </InputGroupAddon>\n                            <InputGroupAddon addonType=\"append\">\n                            <InputGroupText>HEGIC</InputGroupText>\n                            </InputGroupAddon>  \n                        </InputGroup>\n                        <Button style={{\n                                marginTop:'10px',\n                                color:'#15203d',\n                                fontWeight:'bold',\n                                fontFamily:'Jura',\n                                letterSpacing:'.1em',\n                                background:'transparent',\n                                borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                                borderImageSlice:'20',\n                                borderStyle:'solid',\n                                boxSizing:'border-box',\n                                borderRadius:'2px',\n                                borderImageWidth:'50px'}} disabled={ !withdrawButtonEnabled ? true : false } onClick={withdrawHegic}>\n                                    <b>WITHDRAW</b>\n                                </Button>\n                        <Button style={{\n                                marginTop:'10px',\n                                color:'#15203d',\n                                fontWeight:'bold',\n                                fontFamily:'Jura',\n                                letterSpacing:'.1em',\n                                background:'transparent',\n                                borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                                borderImageSlice:'20',\n                                borderStyle:'solid',\n                                boxSizing:'border-box',\n                                borderRadius:'2px',\n                                borderImageWidth:'50px'}} onClick={claimProfitAndWithdrawAll}>\n                                    <b>CLAIM PROFIT AND WITHDRAW ALL</b>\n                                </Button>\n                    </Card>\n                </Col>\n            </Row> \n        </>\n    )\n}\n\nexport default YourSharesTab;","// import { useWeb3React } from '@web3-react/core';\nimport { BigNumber, ethers } from 'ethers'\nimport React, {useState, useEffect, useContext} from 'react'\nimport { UncontrolledTooltip, Row, Col, Card, CardTitle, Alert, CardText, Input, Button, Badge, InputGroup, InputGroupAddon, InputGroupText, Progress} from 'reactstrap'\nimport { useStakingPoolContract, useHegicContract } from '../../contracts/useContract';\nimport { formatBN, truncateEtherValue } from '../../utils'\nimport { WalletContext } from '../../context/Wallet'\n\nfunction DepositTab() {\n    const wallet = useContext(WalletContext);\n    const {account, library, chainId } = wallet.context;\n\n    const LOT_PRICE = ethers.utils.parseEther('888000');\n    const Asset = {WBTC: 0, ETH: 1}\n\n    const HEGIC = useHegicContract();\n    const stakingPool = useStakingPoolContract();\n\n    const [statusMsg, setStatusMsg] = useState();\n    const [totalBalance, setTotalBalance] = useState(ethers.BigNumber.from('0'));\n    const [lockedBalance, setLockedBalance] = useState(ethers.BigNumber.from('0'));\n    const [allowanceIsZero, setAllowanceIsZero] = useState(true);\n\n    const [totalNumberOfStakingLots, setTotalNumberOfStakingLots] = useState(0);\n    const [numberOfStakingLotsETH, setNumberOfStakingLotsETH] = useState(0);\n    const [numberOfStakingLotsWBTC, setNumberOfStakingLotsWBTC] = useState(0);\n    \n    const [amountToDeposit, setAmountToDeposit] = useState(ethers.BigNumber.from('0'));\n    const [depositButtonEnabled, setDepositButtonEnabled] = useState(false);\n\n    useEffect(() => {\n        let status = true;\n        status = status && (amountToDeposit > 0 || amountToDeposit == '');\n        status = status && !allowanceIsZero;     \n        if(amountToDeposit != '')  \n            status = status && ethers.utils.parseEther(amountToDeposit).lte(wallet.balances.HEGICBalance.value);\n        setDepositButtonEnabled(status);\n    }, [wallet.balances.HEGICBalance, allowanceIsZero, amountToDeposit])\n\n    useEffect(() => {\n        setAllowanceIsZero(wallet.allowances.HEGICAllowance.value.isZero());\n    }, [wallet.allowances]);\n\n    useEffect(() => {\n        if(!!account && !!library){\n            setAmountToDeposit('');\n\n            stakingPool.totalBalance().then(\n                (balance) => setTotalBalance(balance)\n            );\n            stakingPool.lockedBalance().then(\n                (balance) => setLockedBalance(balance)\n            );\n            stakingPool.totalNumberOfStakingLots().then(\n                (n) => setTotalNumberOfStakingLots(n.toNumber())\n            );\n            stakingPool.numberOfStakingLots(Asset.ETH).then(\n                (n) => setNumberOfStakingLotsETH(n.toNumber())\n            );\n            stakingPool.numberOfStakingLots(Asset.WBTC).then(\n                (n) => setNumberOfStakingLotsWBTC(n.toNumber())\n            );\n        \n        }\n     }, [wallet.balances]);\n\n    const allow = async () => {\n        const amountToAllow = ethers.BigNumber.from(\"88800000000000000000000000\");\n        const txRequest = await HEGIC.approve(stakingPool.address, amountToAllow);\n        \n        await waitAndUpdate(txRequest);\n    }\n\n    const waitAndUpdate = async (txRequest) => {\n        setStatusMsg( (<a style={{color:'#19274d'}} target='_blank' href={`https://rinkeby.etherscan.io/tx/${txRequest.hash}`}>Pending transaction {txRequest.hash}</a> ) );\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const depositMax = () => {\n        setAmountToDeposit(ethers.utils.formatEther(wallet.balances.HEGICBalance.value));\n    }\n\n    const depositHegic = async () => {\n        let amount;\n        if(amountToDeposit == '') \n            amount = wallet.balances.HEGICBalance.value\n        else \n            amount = ethers.utils.parseEther(amountToDeposit); \n        \n        const txRequest = await stakingPool.deposit(amount);\n        setAmountToDeposit(0);\n        await waitAndUpdate(txRequest);\n    }\n\n    const StatusMsg = () => {\n        return (\n            <>\n            { statusMsg ? (\n                <Alert color=\"primary\" style={{marginTop:'10px'}}>\n                    {statusMsg}\n                </Alert> \n            ) : null }\n            </>\n        );\n    }\n\n    return (\n        <Row>\n        <Col sm=\"12\">\n            <Card body>\n                <CardTitle><h3>Deposit HEGIC</h3></CardTitle>\n                <CardText>\n                    <Badge color='secondary'>{totalNumberOfStakingLots} Staking Lots Purchased</Badge> <Badge color='primary'>{numberOfStakingLotsETH} ETH Lots</Badge> <Badge color='warning'>{numberOfStakingLotsWBTC} BTC Lots</Badge> <Badge color='secondary'>{truncateEtherValue(formatBN(totalBalance), 3)} HEGIC in pool</Badge>\n                    { totalNumberOfStakingLots < 1 ? (\n                        <Alert style={{textAlign:'center', margin:'5pt', padding:'5pt', fontSize:'10pt'}}color=\"warning\">\n                            If you deposit now, you will have a 50% discount on your fees. FOREVER.\n                        </Alert>\n                    ) : (\n                        totalNumberOfStakingLots < 10 ? (\n                            <Alert style={{textAlign:'center', margin:'5pt', padding:'5pt', fontSize:'10pt'}}color=\"warning\">\n                                If you deposit now, you will have a 20% discount on your fees. FOREVER.\n                            </Alert>\n                        ) : (\n                            <br/>\n                        )\n                    )}\n\n                    Deposit your HEGIC in the pool and start earning fees generated by the Hegic Protocol.<br />\n                    &nbsp;&nbsp;1. Deposit your HEGIC<br />\n                    &nbsp;&nbsp;2. You start earning ETH and WBTC right away. <br />\n                    &nbsp;&nbsp;3. Yes, both ETH and WBTC. 🧙‍♂️ Wizardy? 🧙‍♂️<br />\n                    &nbsp;&nbsp;4. You can withdraw your HEGIC anytime<sup>*</sup>.\n               </CardText>\n                    \n                <InputGroup style={{marginTop:'15px'}}>\n                    <Input placeholder={formatBN(wallet.balances.HEGICBalance.value)} \n                    value={amountToDeposit}\n                    onChange={(event) => {\n                        setAmountToDeposit(event.target.value)\n                    }}/>\n                    <InputGroupAddon addonType='append'>\n                    <Button style={{\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderColor:'#45fff4',\n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} onClick={depositMax}>MAX</Button>\n                    </InputGroupAddon>\n                    <InputGroupAddon addonType=\"append\">\n                    <InputGroupText>HEGIC</InputGroupText>\n                    </InputGroupAddon>  \n                </InputGroup>\n                { allowanceIsZero ?\n                    (<Button style={{\n                        marginTop:'10px',\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} onClick={allow}>APPROVE HEGIC</Button>)\n                    :\n                    ( null ) \n                }\n                <Button style={{\n                        marginTop:'10px',\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} disabled={ !depositButtonEnabled ? true : false } onClick={depositHegic}><b>DEPOSIT</b></Button>\n                <StatusMsg />\n                <div style={{textAlign:'center', lineHeight:'80%'}}>\n                    <br></br>\n                    <span style={{fontSize:'12px', color:'#667fcc'}}>A performance fee (5% of profit) applies.</span> \n                    <br/><span style={{fontSize:'12px', color:'#667fcc'}}><sup>*</sup>There is a 24h lock period after each Staking Lot purchase.</span> \n                </div>\n            </Card>\n        </Col>\n      </Row>\n    )\n}\n\nexport default DepositTab;","import React, { useEffect, useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { useWeb3React } from '@web3-react/core';\nimport { useStakingPoolContract } from '../../contracts/useContract';\nimport { Row, Col, Card, CardTitle, CardText } from 'reactstrap'\n\nfunction StatsTab() {\n    const {account, library} = useWeb3React();\n    const stakingPool = useStakingPoolContract();\n    \n    const [ethTotalBalance, setEthTotalBalance] = useState()\n    const [ethLockedBalance, setEthLockedBalance] = useState()\n    const [wbtcTotalBalance, setWbtcTotalBalance] = useState()\n    const [wbtcLockedBalance, setWbtcLockedBalance] = useState()\n    const [ethNumberOfStakingLots, setEthNumberOfStakingLots] = useState()\n    const [wbtcNumberOfStakingLots, setWbtcNumberOfStakingLots] = useState()\n    const [feeRecipient, setFeeRecipient] = useState();\n\n    useEffect(() => {\n        if(!!account && !!library){\n            stakingPool.totalBalance().then((x) => setEthTotalBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            stakingPool.lockedBalance().then((x) => setEthLockedBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            stakingPool.totalNumberOfStakingLots().then((x) => setEthNumberOfStakingLots(x.toString()));\n            stakingPool.FEE_RECIPIENT().then((x) => setFeeRecipient(x));\n        }\n    });\n    \n    return (\n        <Row>\n            <Col sm=\"12\">\n            <Card body>\n                <CardTitle><h3>Stats</h3></CardTitle>\n                <div style={{textAlign:'center'}}>\n                    <h2>COMING SOON!</h2>\n                </div>\n                    {/* <span>Fee recipient is {feeRecipient}</span><br></br>\n                    <span>ETH {ethLockedBalance}/{ethTotalBalance}</span><br></br>\n                    <span>WBTC {wbtcLockedBalance}/{wbtcTotalBalance}</span><br></br>\n                    <span>Number of staking lots ETH {ethNumberOfStakingLots}</span><br></br>\n                    <span>Number of staking lots WBTC {wbtcNumberOfStakingLots}</span> */}\n                </Card>\n            </Col>\n        </Row>\n\n    );\n}\nexport default StatsTab;","import { createContext } from 'react';\n\nconst PoolContext = createContext(\n    {\n        balances: {},\n        lots: []\n    });\n\nexport {\n    PoolContext\n};\n\n","import React, { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useHegicContract, useWBTCContract, useStakingETHContract, useStakingWBTCContract } from '../contracts/useContract'\nimport { Container, Row, Col } from 'reactstrap'\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Button } from 'reactstrap';\nimport classnames from 'classnames'\n\nimport YourSharesTab from './tabs/yourSharesTab'\nimport DepositTab from './tabs/depositTab'\nimport StatsTab from './tabs/statsTab'\nimport { PoolContext } from '../context/Pool'\n\nfunction Dashboard() {\n  const { account } = useWeb3React()\n  const HEGIC = useHegicContract();\n  const stakingETH = useStakingETHContract();\n  const stakingWBTC = useStakingWBTCContract();\n  const WBTC = useWBTCContract();\n\n  const [lots, setLots] = useState([]);\n  const [totalBalance, setTotalBalance] = useState(ethers.BigNumber.from('0'))\n  const [lockedBalance, setLockedBalance] = useState(ethers.BigNumber.from('0'))\n\n  const balances = {\n    totalBalance: {value: totalBalance, setValue: setTotalBalance},\n    lockedBalance: {value: lockedBalance, setValue: setLockedBalance}\n  }\n\n  const waitAndUpdate = async (txRequest) => {\n    console.log(txRequest.hash)\n    await txRequest.wait();\n  }\n\n  const mintHegic = async () => {\n    const amountToMint = ethers.BigNumber.from(\"300000000000000000000000\");\n    const txRequest = await HEGIC.mintTo(account, amountToMint);\n    await waitAndUpdate(txRequest)\n  }\n\n  const mintWBTC = async () => {\n    const amountToMint = ethers.BigNumber.from(\"10000000000\");\n    const txRequest = await WBTC.mintTo(account, amountToMint);\n    const txRequest2 = await WBTC.approve(stakingWBTC.address, amountToMint);\n    await waitAndUpdate(txRequest)\n    await waitAndUpdate(txRequest2)\n  }\n  \n  const sendProfit = async () => {\n    const txRequest = await stakingETH.sendProfit({ value: ethers.utils.parseEther(\"0.1\") })\n    await waitAndUpdate(txRequest)\n  }\n\n  const sendProfitWBTC = async () => {\n    const txRequest = await stakingWBTC.sendProfit(ethers.utils.parseUnits(\"0.1\", 8))\n    await waitAndUpdate(txRequest)\n  }\n\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  }\n\n  return (\n    <Container >\n      <Row style={{ marginTop: \"5vh\" }}>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n          <div>\n            <Nav tabs style={{ justifyContent: \"center\", borderBottom: 0 }}>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '1' })}\n                  onClick={() => { toggle('1'); }}\n                >\n                  Deposit{\"&\"}Stake\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '2' })}\n                  onClick={() => { toggle('2'); }}\n                >\n                  Shares{\"&\"}Profit\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '3' })}\n                  onClick={() => { toggle('3'); }}\n                >\n                  Stats\n                </NavLink>\n              </NavItem>\n            </Nav>\n            <TabContent activeTab={activeTab}>\n              <PoolContext.Provider value={{balances, lots}}>\n                <TabPane tabId=\"1\">\n                  <DepositTab />\n                </TabPane>\n                <TabPane tabId=\"2\">\n                  <YourSharesTab />\n                </TabPane>\n                <TabPane tabId=\"3\">\n                  <StatsTab />\n                </TabPane>\n              </PoolContext.Provider>\n            </TabContent>\n          </div>\n        </Col>\n      </Row>\n      <Row style={{marginBottom:'5vh'}}>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }} style={{display:'flex', justifyContent:'center'}}>\n        {/* <Button size=\"sm\" onClick={mintHegic}>Mint 300k HEGIC</Button>\n        <Button size=\"sm\" onClick={mintWBTC}>Mint 10 WBTC</Button>\n        <Button size=\"sm\" onClick={sendProfit}>Send Profit (0.1ETH)</Button>\n        <Button size=\"sm\" onClick={sendProfitWBTC}>Send Profit (0.1WBTC)</Button> */}\n        {/* <span><a href=\"#\">About</a></span> */}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Dashboard;","import React, { useState, useEffect, useContext } from 'react'\n// import { useWeb3React } from '@web3-react/core'\nimport { useHegicContract, useStakingPoolContract } from '../contracts/useContract'\nimport { ethers } from 'ethers';\nimport { Badge, Button, Col, Navbar} from 'reactstrap';\nimport { hexZeroPad } from 'ethers/lib/utils';\nimport { truncateAddress, truncateEtherValue, formatBN } from '../utils'\nimport { WalletContext } from '../context/Wallet'\n\nfunction Header(props) {\n    // const { account, library, chainId, active } = useWeb3React();\n    const wallet = useContext(WalletContext);\n    const { account, library, chainId, active } = wallet.context;\n\n    const HEGIC = useHegicContract();\n    const stakingPool = useStakingPoolContract();\n\n    useEffect(() => {\n        if(!!account && !!library) {\n            library.getBalance(account).then((balance) => {\n                wallet.balances.ETHBalance.setValue(balance)\n            });\n\n            stakingPool.balanceOf(account).then((balance) => {\n                wallet.balances.sHEGICBalance.setValue(balance)\n            });\n\n            HEGIC.balanceOf(account).then((balance) => {\n                wallet.balances.HEGICBalance.setValue(balance)\n            });\n\n            HEGIC.allowance(account, stakingPool.address).then((allowance) => {\n                wallet.allowances.HEGICAllowance.setValue(allowance);\n            });\n\n            const filter_inputs = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Transfer(address,address,uint256)\"),\n                    null,\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            const filter_outputs = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Transfer(address,address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n            \n            const filter_approve = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Approval(address,address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            const filter_profit = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"PayProfit(address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            library.on(filter_inputs, (log, event) => {\n                HEGIC.balanceOf(account).then((balance) => {\n                    wallet.balances.HEGICBalance.setValue(balance)\n                });\n                stakingPool.balanceOf(account).then((balance) => {\n                    wallet.balances.sHEGICBalance.setValue(balance)\n                });\n            });\n\n            library.on(filter_profit, (log, event) => {\n                library.getBalance(account).then((balance) => {\n                    wallet.balances.ETHBalance.setValue(balance)\n                });\n                // UPDATE PROFIT\n            });\n\n            library.on(filter_outputs, (log, event) => {\n                HEGIC.balanceOf(account).then((balance) => {\n                    wallet.balances.HEGICBalance.setValue(balance)\n                });\n                stakingPool.balanceOf(account).then((balance) => {\n                    wallet.balances.sHEGICBalance.setValue(balance)\n                });\n            });\n\n            library.on(filter_approve, (log, event) => {\n                HEGIC.allowance(account, stakingPool.address).then((allowance) => {\n                    wallet.allowances.HEGICAllowance.setValue(allowance);\n                });\n            });\n        }\n            \n\n    }, [account, library, chainId])\n\n    const Wallet = () => {\n        return (\n            <>\n                <Col sm='0' md={{size:2, offset:5}} style={{display:'flex', justifyContent:'center'}}>\n                    <h3 style={{color:'#45fff4', zIndex:'99', fontFamily:'Jura', fontWeight:'bold'}}>HEGIC</h3>\n                </Col>\n                <Col sm='12' md={{size:5, offset:0}} style={{display:'flex', justifyContent:'flex-end'}}>\n                { active ? (\n                    <div>\n                        <Badge color=\"primary\" style={{margin:\"2.5px\"}}>{truncateEtherValue(formatBN(wallet.balances.HEGICBalance.value),2)} HEGIC </Badge>\n                        <Badge color=\"secondary\" style={{margin:\"2.5px\"}}>{truncateEtherValue(formatBN(wallet.balances.ETHBalance.value),4)} ETH </Badge>\n                        <span style={{color:'#defefe', fontSize:'12px'}}>{truncateAddress(account)}</span>\n                        <Button color=\"link\" onClick={wallet.disconnect}>Disconnect</Button>\n                    </div>\n                ) : (\n                    <Button color=\"link\" onClick={wallet.connect}>Connect</Button>\n                )}\n                </Col>\n            </>\n        )\n    }\n    \n    return (\n            <Navbar style={{display:'flex', backgroundColor:'#19274d', borderBottom: '1px solid #45fff4'}}>\n                <Wallet />\n            </Navbar>\n    );\n}\n\nexport default Header;","import React, { useContext } from 'react';\nimport { Row, Container, Col, Button } from 'reactstrap';\nimport { WalletContext } from '../context/Wallet';\n\nfunction Intro(props) {\n    const connect = useContext(WalletContext).connect\n    return (\n    <Container>\n        <Row style={{marginTop:'10vh', minHeight:'50vh', zIndex:'-1', textAlign:'center'}}>\n            <Col sm='12' md={{ size: 6, offset: 3}}>\n                    <h1 style={{\n                        color:'#45fff4',\n                        fontFamily:'Jura',\n                        fontWeight:'bold',\n                        lineHeight:'125%',\n                        fontSize:'46px',\n                        textTransform:'uppercase'\n                        }}>Hegic Staking Lots for everyone</h1>\n                    <div style={{color: '#defefe', fontFamily:'Exo 2', fontWeight:'500', lineHeight:'150%'}}>\n                    Hegic Protocol generates fees that are distributed among Hegic Staking Lot owners.\n                    Those staking lots are priced at 888,000 HEGIC, being simply unreachable for most of HEGIC holders.\n                    Thanks to <b>Staking Pools</b> you can own a share of a staking lot and earn fees that were reserved\n                    for whales only. \n                    </div>\n                    <div style={{marginTop:'25px', display:'flex', justifyContent:'center'}}>\n                    <Button style={{\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} \n                        onClick={connect}>CONNECT WALLET</Button>\n                    </div>\n            </Col>\n        </Row>\n    </Container>);\n}\n\nexport default Intro;","import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n","import React, { useContext, useState, useEffect } from 'react';\nimport Dashboard from './components/dashboard';\nimport Header from './components/header'\nimport Intro from './components/intro'\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core'\nimport { ethers } from 'ethers';\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { injected } from './connectors';\nimport { WalletContext } from './context/Wallet';\nimport { useHegicContract, usePooledStakingETHContract } from './contracts/useContract'\nfunction getLibrary(provider, connector) {\n  return new ethers.providers.Web3Provider(provider)\n}\n\nfunction App() {\n  const [ETHBalance, setETHBalance] = useState(ethers.BigNumber.from('0'));\n  const [HEGICBalance, setHEGICBalance] = useState(ethers.BigNumber.from('0'));\n  const [sHEGICBalance, setSHEGICBalance] = useState(ethers.BigNumber.from('0'));\n  const [HEGICAllowance, setHEGICAllowance] = useState(ethers.BigNumber.from('0'));\n  const balances = {\n    ETHBalance: {value: ETHBalance, setValue: setETHBalance},\n    HEGICBalance: {value: HEGICBalance, setValue: setHEGICBalance},\n    sHEGICBalance: {value: sHEGICBalance, setValue: setSHEGICBalance}\n  }\n\n  const allowances = {\n    HEGICAllowance: {value: HEGICAllowance, setValue: setHEGICAllowance}\n  }\n\n  const context = useWeb3React()\n  const { connector, active, activate, deactivate, account, library, chainId } = context\n  \n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = useState()\n  useEffect(() => {\n  if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n  }\n  }, [activatingConnector, connector])\n  \n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n  \n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n  \n  function connect() {\n      setActivatingConnector(injected)\n      activate(injected)\n  }\n  \n  function disconnect() {\n  deactivate(injected)\n  }\n\n  return (\n  <WalletContext.Provider value={{context, connect, disconnect, balances, allowances}}>\n    <div style={{ background:'radial-gradient(68.28% 53.52% at 50% 50%, #1c2a4f 0%, #111b35 100%)'}}>\n        <div style={{backgroundImage:'url(https://www.hegic.co/assets/img/background-image.svg)', height:'100vh'}}>\n            <Header />\n            { active ? (\n              <Dashboard />\n            ) : (\n              <Intro />\n            )}\n            {/* <Stats /> */}\n        </div>\n    </div>\n  </WalletContext.Provider>\n  );\n}\n\n\nexport default () => (\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n  </Web3ReactProvider>\n)\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React()\n  \n    const [tried, setTried] = useState(false)\n  \n    useEffect(() => {\n      injected.isAuthorized().then((isAuthorized) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      })\n    }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n  \n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n      if (!tried && active) {\n        setTried(true)\n      }\n    }, [tried, active])\n  \n    return tried\n  }\n  \n  export function useInactiveListener(suppress = false) {\n    const { active, error, activate } = useWeb3React()\n  \n    useEffect(() => {\n      const { ethereum } = window\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\n        const handleConnect = () => {\n          console.log(\"Handling 'connect' event\")\n          activate(injected)\n        }\n        const handleChainChanged = (chainId) => {\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\n          activate(injected)\n        }\n        const handleAccountsChanged = (accounts) => {\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n          if (accounts.length > 0) {\n            activate(injected)\n          }\n        }\n        const handleNetworkChanged = (networkId) => {\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\n          activate(injected)\n        }\n  \n        ethereum.on('connect', handleConnect)\n        ethereum.on('chainChanged', handleChainChanged)\n        ethereum.on('accountsChanged', handleAccountsChanged)\n        ethereum.on('networkChanged', handleNetworkChanged)\n  \n        return () => {\n          if (ethereum.removeListener) {\n            ethereum.removeListener('connect', handleConnect)\n            ethereum.removeListener('chainChanged', handleChainChanged)\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\n          }\n        }\n      }\n    }, [active, error, suppress, activate])\n  }\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["contracts/useContract.js","components/tabs/lotItem.js","utils.js","context/Pool.js","context/Wallet.js","components/tabs/yourLotsTab.js","components/tabs/depositTab.js","components/tabs/statsTab.js","components/dashboard.js","components/header.js","components/intro.js","connectors.js","App.js","hooks.js","serviceWorker.js","index.js"],"names":["getContract","address","ABI","library","account","ethers","Contract","getSigner","useContract","withSignerIfPossible","useWeb3React","useMemo","undefined","error","console","usePooledStakingETHContract","POOLED_STAKING_ETH_ABI","useHegicContract","HEGIC_ABI","LotItem","props","useState","lotId","shares","pooledStakingETH","numberOfStakingLotsETH","setNumberOfStakingLotsETH","buttonEnabled","setButtonEnabled","useEffect","numberOfStakingLots","then","n","toNumber","button","withdrawLot","id","a","exitFromStakingLot","txReceipt","wait","activeButton","Button","style","marginLeft","color","fontWeight","fontFamily","letterSpacing","background","borderImageSource","borderImageSlice","borderStyle","boxSizing","borderRadius","borderImageWidth","size","disabled","onClick","utils","commify","formatEther","margin","outline","UncontrolledTooltip","placement","target","percentage","BigNumber","from","div","ListGroupItem","textAlign","backgroundColor","border","ListGroupItemHeading","Badge","pill","fontSize","Progress","multi","bar","value","truncateEtherValue","str","maxDecimalDigits","includes","parts","split","slice","formatBN","bn","toString","PoolContext","createContext","balances","lots","WalletContext","context","allowances","connect","disconnect","YourLotsTab","wallet","useContext","chainId","lotItems","setLotItems","profit","setProfit","statusMsg","setStatusMsg","claimButtonDisabled","setClaimButtonDisabled","createlotItems","x","items","sHEGICBalance","isZero","getStakingLotShares","sharesInNextStakingLot","i","isInLockUpPeriod","push","key","waitAndUpdate","txRequest","log","hash","claimProfit","profitOf","StatusMsg","Alert","Row","Col","sm","Card","body","CardTitle","CardText","display","flexDirection","justifyContent","width","ListGroup","maxHeight","overflow","overflowX","DepositTab","HEGIC","amountToDeposit","setAmountToDeposit","numberOfSharesInLastLot","setNumberOfSharesInLastLot","setNumberOfStakingLots","totalBalance","setTotalBalance","lockedBalance","setLockedBalance","sharesInLastLot","setSharesInLastLot","availablePercentage","setAvailablePercentage","pendingPercentage","setPendingPercentage","allowanceIsZero","setAllowanceIsZero","depositButtonEnabled","setDepositButtonEnabled","status","parseEther","lte","HEGICBalance","HEGICAllowance","constants","WeiPerEther","balance","STAKING_LOT_PRICE_DIV_100","sub","mul","allow","amountToAllow","approve","depositHegic","deposit","marginTop","filter","topics","tooltipsJSX","once","event","marginBottom","animated","InputGroup","Input","placeholder","onFocus","onChange","InputGroupAddon","addonType","borderColor","InputGroupText","lineHeight","StatsTab","pooledStakingWBTC","POOLED_STAKING_WBTC_ABI","setEthTotalBalance","setEthLockedBalance","setWbtcTotalBalance","setWbtcLockedBalance","setEthNumberOfStakingLots","setWbtcNumberOfStakingLots","setFeeRecipient","FEE_RECIPIENT","Dashboard","stakingETH","STAKING_ETH_ABI","setValue","mintHegic","amountToMint","mintTo","sendProfit","activeTab","setActiveTab","toggle","tab","Container","md","offset","Nav","tabs","borderBottom","NavItem","NavLink","className","classnames","active","TabContent","Provider","TabPane","tabId","Header","getBalance","ETHBalance","balanceOf","allowance","filter_inputs","hexZeroPad","filter_outputs","filter_approve","on","Wallet","zIndex","len","length","substring","truncateAddress","Navbar","Intro","minHeight","textTransform","injected","InjectedConnector","supportedChainIds","getLibrary","provider","connector","providers","Web3Provider","App","setETHBalance","setHEGICBalance","setSHEGICBalance","setHEGICAllowance","activate","deactivate","activatingConnector","setActivatingConnector","suppress","ethereum","window","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","catch","useEagerConnect","backgroundImage","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e747274a.chunk.js","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { useMemo } from 'react'\nimport { ethers } from 'ethers'\n\nimport { abi as POOLED_STAKING_ETH_ABI } from './json/HegicPooledStakingETH.json'\nimport { abi as POOLED_STAKING_WBTC_ABI } from './json/HegicPooledStakingWBTC.json'\nimport { abi as STAKING_ETH_ABI } from './json/FakeHegicStakingETH.json'\nimport { abi as HEGIC_ABI } from './json/FakeHEGIC.json'\n\n// TEST1 CONTRACTS\n// const POOLED_STAKING_ETH_ADDRESS = '0x47B7C230E8624eB598046DB751A7abDE891df95a'\n// const POOLED_STAKING_WBTC_ADDRESS = '0xa3ae456c6b1487f1C0dB5592C72eAcD7DC1759fe'\n// const STAKING_ETH_ADDRESS = '0xdDEA8F9e69B05C1aAbeeb58d221652A3B92d613C'\n// const HEGIC_ADDRESS = '0xaA2A5976a9E9D3d6E4664145F97105881C16c0B9'\n\n// FAKE CONTRACTS\nconst POOLED_STAKING_ETH_ADDRESS = '0x6C97e94B7571834693D5c311aEF834084FaDCc3A'\nconst POOLED_STAKING_WBTC_ADDRESS = '0x2e7Fc37Fc94e16BBFeABd65B94506BCA93136e3c'\nconst STAKING_ETH_ADDRESS = '0xd43e382B9b931a6fE49a62aC9f1374E4d84d974d'\nconst HEGIC_ADDRESS = '0xaA2A5976a9E9D3d6E4664145F97105881C16c0B9'\n\n// returns null on errors\nfunction getContract(address, ABI, library, account) {\n    return new ethers.Contract(address, ABI, library.getSigner(account))\n}\n\nfunction useContract(address, ABI, withSignerIfPossible = true) {\n    const { library, account } = useWeb3React()\n  \n    return useMemo(() => {\n      if (!address || !ABI || !library) return null\n      try {\n        return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n      } catch (error) {\n        console.error('Failed to get contract', error)\n        return null\n      }\n    }, [address, ABI, library, withSignerIfPossible, account])\n  } \n\n  export function usePooledStakingETHContract() {\n    return useContract(POOLED_STAKING_ETH_ADDRESS, POOLED_STAKING_ETH_ABI);\n}\n\nexport function usePooledStakingWBTCContract() {\n    return useContract(POOLED_STAKING_WBTC_ADDRESS, POOLED_STAKING_WBTC_ABI);\n}\n\nexport function useStakingETHContract() {\n    return useContract(STAKING_ETH_ADDRESS, STAKING_ETH_ABI);\n}\n\nexport function useHegicContract() {\n    return useContract(HEGIC_ADDRESS, HEGIC_ABI);\n}","import React, {useEffect, useState} from 'react'\nimport { ethers } from 'ethers'\nimport { usePooledStakingETHContract } from '../../contracts/useContract';\nimport { UncontrolledTooltip, Badge, ListGroupItem, ListGroupItemHeading, Progress, Button } from 'reactstrap'\n\nfunction LotItem(props) {\n    const [lotId] = useState(props.lotId);\n    const [shares] = useState(props.shares);\n    const pooledStakingETH = usePooledStakingETHContract();\n    const [numberOfStakingLotsETH, setNumberOfStakingLotsETH] = useState(0);\n    const [buttonEnabled, setButtonEnabled] = useState(true);\n\n    useEffect(() => {\n        pooledStakingETH.numberOfStakingLots().then((n) => {\n            setNumberOfStakingLotsETH(n.toNumber())\n        })\n    }, [pooledStakingETH])\n\n    const withdrawLot = async (id) => {\n        const txReceipt = await pooledStakingETH.exitFromStakingLot(id)\n        setButtonEnabled(false);\n        await txReceipt.wait()\n    }\n\n    let button;\n    if((shares > 0 && props.activeButton) || lotId == numberOfStakingLotsETH) \n    button = (\n        <Button id=\"unlocked\" style={{\n            marginLeft:'10px',\n            color:'#15203d',\n            fontWeight:'bold',\n            fontFamily:'Jura',\n            letterSpacing:'.1em',\n            background:'transparent',\n            borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n            borderImageSlice:'20',\n            borderStyle:'solid',\n            boxSizing:'border-box',\n            borderRadius:'2px',\n            borderImageWidth:'50px'}} size=\"sm\" disabled={!buttonEnabled} onClick={() => withdrawLot(lotId)}>\n            WITHDRAW {ethers.utils.commify(ethers.utils.formatEther(shares))} HEGIC\n        </Button>\n    );\n    else if (!props.activeButton && lotId != numberOfStakingLotsETH)\n        button = (\n            <>\n                <Button id=\"locked\" style={{margin:'3px'}} outline disabled size=\"sm\">\n                    WITHDRAW {ethers.utils.commify(ethers.utils.formatEther(shares))} HEGIC\n                </Button>\n                <UncontrolledTooltip placement=\"bottom\" target=\"locked\" >\n                    THIS LOT IS LOCKED\n                </UncontrolledTooltip>\n            </>\n        )\n    \n    const percentage = ethers.BigNumber.from(shares)\n                        .div(ethers.BigNumber.from('888000000000000000000')).toNumber()/10;\n    \n    return (\n        <ListGroupItem style={{textAlign:'left', backgroundColor:'transparent', border:'1px solid #223265'}}>\n                <ListGroupItemHeading>\n                    Lot {lotId} \n                    <Badge pill style={{fontSize:12, marginLeft:\"5px\"}}>{percentage}%</Badge>\n                    {/* { lotId === numberOfStakingLotsETH ? \n                        (<Badge pill style={{fontSize:12, marginLeft:\"5px\"}} color='warning'>NOT PURCHASED</Badge>)\n                        :\n                        (null)\n                    } */}\n                    {button}\n                </ListGroupItemHeading>\n                    <Progress multi>\n                        <Progress bar color=\"primary\" style={{color:'#19274d'}} value={percentage}>You</Progress>\n                        { lotId === numberOfStakingLotsETH ? \n                            (<Progress bar color=\"secondary\" value={100-percentage}>Pending</Progress>)\n                                : \n                            (<Progress bar color=\"info\" value={100-percentage}>Others</Progress>)\n                        }\n                    </Progress>\n        </ListGroupItem>\n    )\n}\n\nexport default LotItem;","import { ethers } from 'ethers'\n\nconst truncateEtherValue = (str, maxDecimalDigits) => {\n    if (str.includes(\".\")) {\n    const parts = str.split(\".\");\n    return parts[0] + \".\" + parts[1].slice(0, maxDecimalDigits);\n    }\n    return str;\n};\n\nconst formatBN = (bn) => {\n    return ethers.utils.commify(ethers.utils.formatEther(bn.toString()));\n}\n\nconst truncateAddress = (str) => {\n    const len = str.length;\n    return str.substring(0, 8) + '...' + str.substring(len-7, len-1);\n}\n\nexport {\n    truncateEtherValue,\n    formatBN, \n    truncateAddress\n}","import { createContext } from 'react';\n\nconst PoolContext = createContext(\n    {\n        balances: {},\n        lots: []\n    });\n\nexport {\n    PoolContext\n};\n\n","import { createContext } from 'react';\n\nconst WalletContext = createContext(\n    {\n        context: {},\n        balances: {},\n        allowances: {},\n        connect: () => {},\n        disconnect: () => {}\n    });\n\nexport {\n    WalletContext\n};\n\n","// import { useWeb3React } from '@web3-react/core';\nimport React, { useState, useEffect, useContext } from 'react'\nimport { usePooledStakingETHContract } from '../../contracts/useContract';\nimport LotItem from './lotItem'\nimport { CardTitle, Row, Col, Card, ListGroup, Button, CardText, Alert } from 'reactstrap'\nimport { ethers } from 'ethers'\nimport { truncateEtherValue, formatBN } from '../../utils'\nimport { PoolContext } from '../../context/Pool'\nimport { WalletContext } from '../../context/Wallet'\n\nfunction YourLotsTab () {\n    // const {account, library, chainId } = useWeb3React();\n    const wallet = useContext(WalletContext);\n    const {account, library, chainId } = wallet.context;\n\n    const pooledStakingETH = usePooledStakingETHContract();\n\n    const [lotItems, setLotItems] = useState();\n    const [profit, setProfit] = useState(ethers.BigNumber.from('0'));\n    const [statusMsg, setStatusMsg] = useState('');\n    const [claimButtonDisabled, setClaimButtonDisabled] = useState(false);\n    \n    const createlotItems = async () => {\n        const numberOfStakingLots = await pooledStakingETH.numberOfStakingLots().then(x => x.toNumber());\n        const items = []\n        let shares; \n        let isInLockUpPeriod;\n        if(wallet.balances.sHEGICBalance.value.isZero()) \n            return (\n                <span>You have not staked your HEGIC yet. <br /> Go to \"Deposit&Stake\" tab and deposit HEGIC.</span>\n            );\n        const sharesInNextStakingLot = await pooledStakingETH.getStakingLotShares(numberOfStakingLots, account);\n        for(let i = 0; i <= numberOfStakingLots; i++){\n            shares = await pooledStakingETH.getStakingLotShares(i, account)\n            isInLockUpPeriod = await pooledStakingETH.isInLockUpPeriod(i);\n            if(shares > 0)\n                items.push(<LotItem key={i} shares={shares.toString()} lotId={i} activeButton={sharesInNextStakingLot==0 && !isInLockUpPeriod}></LotItem>)\n        }\n\n        return items\n    }\n\n    const waitAndUpdate = async (txRequest) => {\n        console.log(txRequest.hash)\n        setStatusMsg(\"Pending \" + txRequest.hash);\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const claimProfit = async () => {\n        const txRequest = await pooledStakingETH.claimProfit({from: account});\n        setClaimButtonDisabled(true);\n        await waitAndUpdate(txRequest)\n    }\n\n    useEffect(() => {\n        if (!!account && !!library) {\n            createlotItems().then((x) => {\n                setLotItems(x);\n            })\n            \n            pooledStakingETH.profitOf(account).then(profit => {\n                setProfit(profit);\n                if(profit.isZero())\n                    setClaimButtonDisabled(true);\n            })\n        }\n    }, [wallet.balances]);\n\n    const StatusMsg = () => {\n        return (\n            <>\n            { statusMsg ? (\n                <Alert color=\"primary\">\n                    {statusMsg}\n                </Alert> \n            ) : null }\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Row>\n                <Col sm=\"12\">\n                    <Card body >\n                        <CardTitle><h3>Your Staking Lots</h3></CardTitle>\n                        <CardText>\n                            In this tab you will see all the lots in which you have shares. \n                            <br />\n                            Before you exit any lot, you have to WITHDRAW unstaked funds. Also, lots are locked-up for 14 days after purchase\n                            <br />\n                        </CardText>\n                            <div style={{\n                            display:'flex',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                            textAlign:'center'\n                            }}>\n                                <b>Your profit:</b>\n                                {truncateEtherValue(formatBN(profit), 4)} ETH\n                                <br /> \n                                <Button size=\"sm\" style={{\n                                width: 'auto',\n                                color:'#15203d',\n                                fontWeight:'bold',\n                                fontFamily:'Jura',\n                                letterSpacing:'.1em',\n                                background:'transparent',\n                                borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                                borderImageSlice:'20',\n                                borderStyle:'solid',\n                                boxSizing:'border-box',\n                                borderRadius:'2px',\n                                borderImageWidth:'50px'}} disabled={claimButtonDisabled} onClick={claimProfit}>\n                                    CLAIM PROFIT\n                                </Button>\n                                <span style={{fontSize:'12px', color:'#667fcc'}}>A performance fee (10% of profit) applies.</span> \n                            </div>\n                            <br />\n                            <StatusMsg />\n                        <ListGroup style={{textAlign:'center', maxHeight:\"300px\", overflow:\"scroll\", overflowX:'hidden', border:\"1px solid rgba(0, 0, 0, 0.125)\"}}>\n                            {lotItems}\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row> \n        </>\n    )\n}\n\nexport default YourLotsTab;","// import { useWeb3React } from '@web3-react/core';\nimport { BigNumber, ethers } from 'ethers'\nimport React, {useState, useEffect, useContext} from 'react'\nimport { UncontrolledTooltip, Row, Col, Card, CardTitle, Alert, CardText, Input, Button, Badge, InputGroup, InputGroupAddon, InputGroupText, Progress} from 'reactstrap'\nimport { usePooledStakingETHContract, useHegicContract } from '../../contracts/useContract';\nimport { formatBN } from '../../utils'\nimport { WalletContext } from '../../context/Wallet'\n\nfunction DepositTab() {\n    // const {account, library, chainId } = useWeb3React();\n    const wallet = useContext(WalletContext);\n    const {account, library, chainId } = wallet.context;\n\n    const HEGIC = useHegicContract();\n    const pooledStakingETH = usePooledStakingETHContract();\n\n    const [amountToDeposit, setAmountToDeposit] = useState(0);\n    const [numberOfSharesInLastLot, setNumberOfSharesInLastLot] = useState(ethers.BigNumber.from('0'));\n    const [statusMsg, setStatusMsg] = useState();\n    const [numberOfStakingLots, setNumberOfStakingLots] = useState(ethers.BigNumber.from('0'));\n    const [totalBalance, setTotalBalance] = useState(ethers.BigNumber.from('0'));\n    const [lockedBalance, setLockedBalance] = useState(ethers.BigNumber.from('0'));\n    const [sharesInLastLot, setSharesInLastLot] = useState(ethers.BigNumber.from('0'));\n    const [availablePercentage, setAvailablePercentage] = useState(0);\n    const [pendingPercentage, setPendingPercentage] = useState(0);\n    const [allowanceIsZero, setAllowanceIsZero] = useState(true);\n    const [depositButtonEnabled, setDepositButtonEnabled] = useState(false);\n\n    useEffect(() => {\n        let status = true;\n\n        status = status && amountToDeposit > 0 && amountToDeposit < 888000;\n        status = status && !allowanceIsZero;       \n        status = status && ethers.utils.parseEther(amountToDeposit).lte(wallet.balances.HEGICBalance.value);\n        setDepositButtonEnabled(status);\n    }, [wallet.balances.HEGICBalance, allowanceIsZero, amountToDeposit])\n\n    useEffect(() => {\n        setAllowanceIsZero(wallet.allowances.HEGICAllowance.value.isZero());\n    }, [wallet.allowances]);\n\n    useEffect(() => {\n        if(!!account && !!library){\n            setAmountToDeposit(wallet.balances.HEGICBalance.value.div(ethers.constants.WeiPerEther).toString());\n\n            pooledStakingETH.totalBalance().then(\n                (balance) => setTotalBalance(balance)\n                );\n            pooledStakingETH.lockedBalance().then(\n                (balance) => setLockedBalance(balance)\n                );\n            pooledStakingETH.numberOfStakingLots().then(\n                n => {\n                    setNumberOfStakingLots(n)\n                    const STAKING_LOT_PRICE_DIV_100 = ethers.BigNumber.from('8880000000000000000000'); // divided by 100\n                    pooledStakingETH.getStakingLotShares(n, account)\n                    .then(shares => {\n                        setNumberOfSharesInLastLot(shares);\n                        setSharesInLastLot(shares.div(STAKING_LOT_PRICE_DIV_100).toNumber())\n                        });\n                });\n        }\n     }, [wallet.balances]);\n\n    useEffect(() => {\n        if(!totalBalance.isZero()){\n            const availablePercentage = totalBalance.sub(lockedBalance).mul(ethers.BigNumber.from('100')).div(ethers.utils.parseEther('888000')).toNumber();\n            const pendingPercentage = 100 - availablePercentage;\n\n            setAvailablePercentage(availablePercentage);\n            setPendingPercentage(pendingPercentage);\n        }\n    }, [wallet.balances, totalBalance, lockedBalance, numberOfStakingLots, sharesInLastLot])\n\n    const allow = async () => {\n        const amountToAllow = ethers.BigNumber.from(\"88700000000000000000000000\");\n        const txRequest = await HEGIC.approve(pooledStakingETH.address, amountToAllow);\n        \n        await waitAndUpdate(txRequest);\n    }\n\n    const waitAndUpdate = async (txRequest) => {\n        setStatusMsg(\"Pending transaction \"+txRequest.hash);\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const depositMax = () => {\n        setAmountToDeposit(wallet.balances.HEGICBalance.value.div(ethers.constants.WeiPerEther).toString());\n    }\n\n    const depositHegic = async () => {\n        const txRequest = await pooledStakingETH.deposit(ethers.utils.parseEther(amountToDeposit));\n        setAmountToDeposit(0);\n        await waitAndUpdate(txRequest);\n    }\n\n    const StatusMsg = () => {\n        return (\n            <>\n            { statusMsg ? (\n                <Alert color=\"primary\" style={{marginTop:'10px'}}>\n                    {statusMsg}\n                </Alert> \n            ) : null }\n            </>\n        );\n    }\n\n    const filter = {\n        address: '0x47B7C230E8624eB598046DB751A7abDE891df95a',\n        topics: [\n            ethers.utils.id(\"Deposit(address,uint256)\")\n        ]\n    }\n    \n    const tooltipsJSX = (<>\n        <UncontrolledTooltip placement=\"bottom\" target=\"progress-others\" >\n            Others: {formatBN(totalBalance.sub(lockedBalance).sub(wallet.balances.sHEGICBalance.value))} HEGIC\n        </UncontrolledTooltip>\n        <UncontrolledTooltip placement=\"bottom\" target=\"progress-pending\" >\n            Pending: {formatBN(ethers.utils.parseEther('888000').sub(totalBalance.sub(lockedBalance)))} HEGIC\n        </UncontrolledTooltip>\n      </>);\n\n\n    library.once(filter, (log, event) => {\n        pooledStakingETH.totalBalance().then((balance) => setTotalBalance(balance));\n    });\n\n    return (\n        <Row>\n        <Col sm=\"12\">\n            <Card body>\n                <CardTitle><h3>Deposit HEGIC</h3></CardTitle>\n\n                <CardText>\n                    <Badge color=\"primary\">You have {formatBN(wallet.balances.sHEGICBalance.value)} sHEGIC</Badge>\n                </CardText>\n\n                <CardText>\n                    Deposit your HEGIC in the pool and start earning fees generated by the Hegic Protocol.<br />\n                    1. Deposit your HEGIC<br />\n                    2. When deposited amount reaches the Staking Lot Price, the contract will buy a Hegic Staking Lot<br />\n                    3. Earn Hegic Protocol fees <br />\n               </CardText>\n                    <>\n                    <h5>Next Lot (#{numberOfStakingLots.toString()})</h5> \n                    <Badge style={{marginBottom:'5px'}}>{ formatBN(ethers.utils.parseEther('888000').sub(totalBalance.sub(lockedBalance)).toString())} HEGIC until next Staking Lot purchase</Badge>\n                    { totalBalance.toString() == '0' ? null : (\n                    <>\n                        { sharesInLastLot.toString() == '0' ? (\n                            <>\n                            <Progress multi>\n                                <Progress bar id='progress-others' style={{color:'#19274d'}} color=\"warning\" value={availablePercentage}>Others</Progress>\n                                <Progress bar animated id='progress-pending' color=\"secondary\" value={pendingPercentage}>Pending</Progress>\n                            </Progress>\n                            {tooltipsJSX}\n                            </>\n                        ) : (<>\n                            <Progress multi>\n                                <Progress bar id='progress-others' style={{color:'#19274d'}} color=\"warning\" value={availablePercentage-sharesInLastLot}>Others</Progress>\n                                <Progress bar id='progress-you' style={{color:'#19274d'}} color=\"primary\" value={sharesInLastLot}>You</Progress>\n                                <Progress bar animated id='progress-pending' color=\"secondary\" value={pendingPercentage}>Pending</Progress>\n                            </Progress>\n                            {tooltipsJSX}\n                            <UncontrolledTooltip placement=\"bottom\" target=\"progress-you\" >\n                                You: {formatBN(numberOfSharesInLastLot)} HEGIC\n                            </UncontrolledTooltip>\n                          </>\n                        ) }\n\n                    </>\n                    )}\n                    </>\n                <InputGroup style={{marginTop:'15px'}}>\n                    <Input placeholder=\"0\" \n                    onFocus={(event) => event.target.value = ''}\n                    value={amountToDeposit}\n                    onChange={(event) => {\n                        setAmountToDeposit(event.target.value || '0')\n                    }}/>\n                    <InputGroupAddon addonType='append'>\n                    <Button style={{\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderColor:'#45fff4',\n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} onClick={depositMax}>MAX</Button>\n                    </InputGroupAddon>\n                    <InputGroupAddon addonType=\"append\">\n                    <InputGroupText>HEGIC</InputGroupText>\n                    </InputGroupAddon>  \n                </InputGroup>\n                { allowanceIsZero ?\n                    (<Button style={{\n                        marginTop:'10px',\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} onClick={allow}>APPROVE HEGIC</Button>)\n                    :\n                    ( null ) \n                }\n                <Button style={{\n                        marginTop:'10px',\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} disabled={ !depositButtonEnabled ? true : false } onClick={depositHegic}><b>DEPOSIT</b></Button>\n                <StatusMsg />\n                <div style={{textAlign:'center', lineHeight:'75%'}}>\n                    <br></br>\n                    <span style={{fontSize:'12px', color:'#667fcc'}}>A performance fee (10% of profit) applies.</span> \n                    <br/><span style={{fontSize:'12px', color:'#667fcc'}}>You can withdraw your unused funds for free anytime. If a lot is purchased, you will have to wait 2 weeks.</span> \n                </div>\n            </Card>\n        </Col>\n      </Row>\n    )\n}\n\nexport default DepositTab;","import React, { useEffect, useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { useWeb3React } from '@web3-react/core';\nimport { usePooledStakingETHContract, usePooledStakingWBTCContract } from '../../contracts/useContract';\nimport { Row, Col, Card, CardTitle, CardText } from 'reactstrap'\n\nfunction StatsTab() {\n    const {account, library} = useWeb3React();\n    const pooledStakingETH = usePooledStakingETHContract();\n    const pooledStakingWBTC = usePooledStakingWBTCContract();\n    \n    const [ethTotalBalance, setEthTotalBalance] = useState()\n    const [ethLockedBalance, setEthLockedBalance] = useState()\n    const [wbtcTotalBalance, setWbtcTotalBalance] = useState()\n    const [wbtcLockedBalance, setWbtcLockedBalance] = useState()\n    const [ethNumberOfStakingLots, setEthNumberOfStakingLots] = useState()\n    const [wbtcNumberOfStakingLots, setWbtcNumberOfStakingLots] = useState()\n    const [feeRecipient, setFeeRecipient] = useState();\n\n    useEffect(() => {\n        if(!!account && !!library){\n            pooledStakingETH.totalBalance().then((x) => setEthTotalBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingETH.lockedBalance().then((x) => setEthLockedBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingWBTC.totalBalance().then((x) => setWbtcTotalBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingWBTC.lockedBalance().then((x) => setWbtcLockedBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingETH.numberOfStakingLots().then((x) => setEthNumberOfStakingLots(x.toString()));\n            pooledStakingWBTC.numberOfStakingLots().then((x) => setWbtcNumberOfStakingLots(x.toString()));\n            pooledStakingETH.FEE_RECIPIENT().then((x) => setFeeRecipient(x));\n        }\n    });\n    \n    return (\n        <Row>\n            <Col sm=\"12\">\n            <Card body>\n                <CardTitle><h3>Stats</h3></CardTitle>\n                <div style={{textAlign:'center'}}>\n                    <h2>COMING SOON!</h2>\n                </div>\n                    {/* <span>Fee recipient is {feeRecipient}</span><br></br>\n                    <span>ETH {ethLockedBalance}/{ethTotalBalance}</span><br></br>\n                    <span>WBTC {wbtcLockedBalance}/{wbtcTotalBalance}</span><br></br>\n                    <span>Number of staking lots ETH {ethNumberOfStakingLots}</span><br></br>\n                    <span>Number of staking lots WBTC {wbtcNumberOfStakingLots}</span> */}\n                </Card>\n            </Col>\n        </Row>\n\n    );\n}\nexport default StatsTab;","import React, { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useHegicContract, usePooledStakingETHContract, useStakingETHContract } from '../contracts/useContract'\nimport { Container, Row, Col } from 'reactstrap'\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Button } from 'reactstrap';\nimport classnames from 'classnames'\n\nimport YourLotsTab from './tabs/yourLotsTab'\nimport DepositTab from './tabs/depositTab'\nimport StatsTab from './tabs/statsTab'\nimport { PoolContext } from '../context/Pool'\n\nfunction Dashboard() {\n  const { account } = useWeb3React()\n  const HEGIC = useHegicContract();\n  const stakingETH = useStakingETHContract();\n\n  const [lots, setLots] = useState([]);\n  const [totalBalance, setTotalBalance] = useState(ethers.BigNumber.from('0'))\n  const [lockedBalance, setLockedBalance] = useState(ethers.BigNumber.from('0'))\n\n  const balances = {\n    totalBalance: {value: totalBalance, setValue: setTotalBalance},\n    lockedBalance: {value: lockedBalance, setValue: setLockedBalance}\n  }\n\n  const waitAndUpdate = async (txRequest) => {\n    console.log(txRequest.hash)\n    await txRequest.wait();\n  }\n\n  const mintHegic = async () => {\n    const amountToMint = ethers.BigNumber.from(\"300000000000000000000000\");\n    const txRequest = await HEGIC.mintTo(account, amountToMint);\n    await waitAndUpdate(txRequest)\n  }\n\n  const sendProfit = async () => {\n    const txRequest = await stakingETH.sendProfit({ value: ethers.utils.parseEther(\"0.1\") })\n    await waitAndUpdate(txRequest)\n  }\n\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  }\n\n  return (\n    <Container >\n      <Row style={{ marginTop: \"5vh\" }}>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n          <div>\n            <Nav tabs style={{ justifyContent: \"center\", borderBottom: 0 }}>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '1' })}\n                  onClick={() => { toggle('1'); }}\n                >\n                  Deposit {\"&\"} Stake\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '2' })}\n                  onClick={() => { toggle('2'); }}\n                >\n                  Your Staking Lots\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '3' })}\n                  onClick={() => { toggle('3'); }}\n                >\n                  Stats\n                </NavLink>\n              </NavItem>\n            </Nav>\n            <TabContent activeTab={activeTab}>\n              <PoolContext.Provider value={{balances, lots}}>\n                <TabPane tabId=\"1\">\n                  <DepositTab />\n                </TabPane>\n                <TabPane tabId=\"2\">\n                  <YourLotsTab />\n                </TabPane>\n                <TabPane tabId=\"3\">\n                  <StatsTab />\n                </TabPane>\n              </PoolContext.Provider>\n            </TabContent>\n          </div>\n        </Col>\n      </Row>\n      <Row style={{marginBottom:'5vh'}}>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }} style={{display:'flex', justifyContent:'center'}}>\n        <Button size=\"sm\" onClick={mintHegic}>Mint 300k HEGIC</Button>\n        <Button size=\"sm\" onClick={sendProfit}>Send Profit (0.1ETH)</Button>\n        {/* <span><a href=\"#\">About</a></span> */}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Dashboard;","import React, { useState, useEffect, useContext } from 'react'\n// import { useWeb3React } from '@web3-react/core'\nimport { useHegicContract, usePooledStakingETHContract } from '../contracts/useContract'\nimport { ethers } from 'ethers';\nimport { Badge, Button, Col, Navbar} from 'reactstrap';\nimport { hexZeroPad } from 'ethers/lib/utils';\nimport { truncateAddress, truncateEtherValue, formatBN } from '../utils'\nimport { WalletContext } from '../context/Wallet'\n\nfunction Header(props) {\n    // const { account, library, chainId, active } = useWeb3React();\n    const wallet = useContext(WalletContext);\n    const { account, library, chainId, active } = wallet.context;\n\n    const HEGIC = useHegicContract();\n    const pooledStakingETH = usePooledStakingETHContract();\n\n    useEffect(() => {\n        if(!!account && !!library) {\n            library.getBalance(account).then((balance) => {\n                wallet.balances.ETHBalance.setValue(balance)\n            });\n\n            pooledStakingETH.balanceOf(account).then((balance) => {\n                wallet.balances.sHEGICBalance.setValue(balance)\n            });\n\n            HEGIC.balanceOf(account).then((balance) => {\n                wallet.balances.HEGICBalance.setValue(balance)\n            });\n\n            HEGIC.allowance(account, pooledStakingETH.address).then((allowance) => {\n                wallet.allowances.HEGICAllowance.setValue(allowance);\n            });\n\n            const filter_inputs = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Transfer(address,address,uint256)\"),\n                    null,\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            const filter_outputs = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Transfer(address,address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n            \n            const filter_approve = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Approval(address,address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            library.on(filter_inputs, (log, event) => {\n                HEGIC.balanceOf(account).then((balance) => {\n                    wallet.balances.HEGICBalance.setValue(balance)\n                });\n                pooledStakingETH.balanceOf(account).then((balance) => {\n                    wallet.balances.sHEGICBalance.setValue(balance)\n                });\n            });\n\n            library.on(filter_outputs, (log, event) => {\n                HEGIC.balanceOf(account).then((balance) => {\n                    wallet.balances.HEGICBalance.setValue(balance)\n                });\n                pooledStakingETH.balanceOf(account).then((balance) => {\n                    wallet.balances.sHEGICBalance.setValue(balance)\n                });\n            });\n\n            library.on(filter_approve, (log, event) => {\n                HEGIC.allowance(account, pooledStakingETH.address).then((allowance) => {\n                    wallet.allowances.HEGICAllowance.setValue(allowance);\n                });\n            });\n        }\n            \n\n    }, [account, library, chainId])\n\n    const Wallet = () => {\n        return (\n            <>\n                <Col sm='0' md={{size:2, offset:5}} style={{display:'flex', justifyContent:'center'}}>\n                    <h3 style={{color:'#45fff4', zIndex:'99', fontFamily:'Jura', fontWeight:'bold'}}>HEGIC</h3>\n                </Col>\n                <Col sm='12' md={{size:5, offset:0}} style={{display:'flex', justifyContent:'flex-end'}}>\n                { active ? (\n                    <div>\n                        <Badge color=\"primary\" style={{margin:\"2.5px\"}}>{formatBN(wallet.balances.HEGICBalance.value)} HEGIC </Badge>\n                        <Badge color=\"secondary\" style={{margin:\"2.5px\"}}>{truncateEtherValue(formatBN(wallet.balances.ETHBalance.value),4)} ETH </Badge>\n                        <span style={{color:'#defefe', fontSize:'12px'}}>{truncateAddress(account)}</span>\n                        <Button color=\"link\" onClick={wallet.disconnect}>Disconnect</Button>\n                    </div>\n                ) : (\n                    <Button color=\"link\" onClick={wallet.connect}>Connect</Button>\n                )}\n                </Col>\n            </>\n        )\n    }\n    \n    return (\n            <Navbar style={{display:'flex', backgroundColor:'#19274d', borderBottom: '1px solid #45fff4'}}>\n                <Wallet />\n            </Navbar>\n    );\n}\n\nexport default Header;","import React, { useContext } from 'react';\nimport { Row, Container, Col, Button } from 'reactstrap';\nimport { WalletContext } from '../context/Wallet';\n\nfunction Intro(props) {\n    const connect = useContext(WalletContext).connect\n    return (\n    <Container>\n        <Row style={{marginTop:'10vh', minHeight:'50vh', zIndex:'-1', textAlign:'center'}}>\n            <Col sm='12' md={{ size: 6, offset: 3}}>\n                    <h1 style={{\n                        color:'#45fff4',\n                        fontFamily:'Jura',\n                        fontWeight:'bold',\n                        lineHeight:'125%',\n                        fontSize:'46px',\n                        textTransform:'uppercase'\n                        }}>Hegic Staking Lots for everyone</h1>\n                    <div style={{color: '#defefe', fontFamily:'Exo 2', fontWeight:'500', lineHeight:'150%'}}>\n                    Hegic Protocol generates fees that are distributed among Hegic Staking Lot owners.\n                    Those staking lots are priced at 888,000 HEGIC, being simply unreachable for most of HEGIC holders.\n                    Thanks to <b>Staking Pools</b> you can own a share of a staking lot and earn fees that were reserved\n                    for whales only. \n                    </div>\n                    <div style={{marginTop:'25px', display:'flex', justifyContent:'center'}}>\n                    <Button style={{\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} \n                        onClick={connect}>CONNECT WALLET</Button>\n                    </div>\n            </Col>\n        </Row>\n    </Container>);\n}\n\nexport default Intro;","import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n","import React, { useContext, useState, useEffect } from 'react';\nimport Dashboard from './components/dashboard';\nimport Header from './components/header'\nimport Intro from './components/intro'\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core'\nimport { ethers } from 'ethers';\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { injected } from './connectors';\nimport { WalletContext } from './context/Wallet';\nimport { useHegicContract, usePooledStakingETHContract } from './contracts/useContract'\nfunction getLibrary(provider, connector) {\n  return new ethers.providers.Web3Provider(provider)\n}\n\nfunction App() {\n  const [ETHBalance, setETHBalance] = useState(ethers.BigNumber.from('0'));\n  const [HEGICBalance, setHEGICBalance] = useState(ethers.BigNumber.from('0'));\n  const [sHEGICBalance, setSHEGICBalance] = useState(ethers.BigNumber.from('0'));\n  const [HEGICAllowance, setHEGICAllowance] = useState(ethers.BigNumber.from('0'));\n  const balances = {\n    ETHBalance: {value: ETHBalance, setValue: setETHBalance},\n    HEGICBalance: {value: HEGICBalance, setValue: setHEGICBalance},\n    sHEGICBalance: {value: sHEGICBalance, setValue: setSHEGICBalance}\n  }\n\n  const allowances = {\n    HEGICAllowance: {value: HEGICAllowance, setValue: setHEGICAllowance}\n  }\n\n  const context = useWeb3React()\n  const { connector, active, activate, deactivate, account, library, chainId } = context\n  \n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = useState()\n  useEffect(() => {\n  if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n  }\n  }, [activatingConnector, connector])\n  \n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n  \n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n  \n  function connect() {\n      setActivatingConnector(injected)\n      activate(injected)\n  }\n  \n  function disconnect() {\n  deactivate(injected)\n  }\n\n  useEffect(() => {\n    if(!!account && !!library)\n      library.getBalance(account).then((balance) => setETHBalance(balance));\n      // HEGIC.balanceOf(account).then((balance) => setHEGICBalance(balance));\n      // pooledStakingETH.getBalance(account).then((balance) => setSHEGICBalance(balance))\n\n  }, [account, library, chainId])\n\n  return (\n  <WalletContext.Provider value={{context, connect, disconnect, balances, allowances}}>\n    <div style={{ background:'radial-gradient(68.28% 53.52% at 50% 50%, #1c2a4f 0%, #111b35 100%)'}}>\n        <div style={{backgroundImage:'url(https://www.hegic.co/assets/img/background-image.svg)', height:'100vh'}}>\n            <Header />\n            { active ? (\n              <Dashboard />\n            ) : (\n              <Intro />\n            )}\n            {/* <Stats /> */}\n        </div>\n    </div>\n  </WalletContext.Provider>\n  );\n}\n\n\nexport default () => (\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n  </Web3ReactProvider>\n)\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React()\n  \n    const [tried, setTried] = useState(false)\n  \n    useEffect(() => {\n      injected.isAuthorized().then((isAuthorized) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      })\n    }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n  \n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n      if (!tried && active) {\n        setTried(true)\n      }\n    }, [tried, active])\n  \n    return tried\n  }\n  \n  export function useInactiveListener(suppress = false) {\n    const { active, error, activate } = useWeb3React()\n  \n    useEffect(() => {\n      const { ethereum } = window\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\n        const handleConnect = () => {\n          console.log(\"Handling 'connect' event\")\n          activate(injected)\n        }\n        const handleChainChanged = (chainId) => {\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\n          activate(injected)\n        }\n        const handleAccountsChanged = (accounts) => {\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n          if (accounts.length > 0) {\n            activate(injected)\n          }\n        }\n        const handleNetworkChanged = (networkId) => {\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\n          activate(injected)\n        }\n  \n        ethereum.on('connect', handleConnect)\n        ethereum.on('chainChanged', handleChainChanged)\n        ethereum.on('accountsChanged', handleAccountsChanged)\n        ethereum.on('networkChanged', handleNetworkChanged)\n  \n        return () => {\n          if (ethereum.removeListener) {\n            ethereum.removeListener('connect', handleConnect)\n            ethereum.removeListener('chainChanged', handleChainChanged)\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\n          }\n        }\n      }\n    }, [active, error, suppress, activate])\n  }\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["contracts/useContract.js","components/tabs/lotItem.js","components/tabs/yourLotsTab.js","components/tabs/depositTab.js","components/tabs/statsTab.js","components/dashboard.js","connectors.js","components/header.js","components/intro.js","App.js","hooks.js","serviceWorker.js","index.js"],"names":["getContract","address","ABI","library","account","ethers","Contract","getSigner","useContract","withSignerIfPossible","useWeb3React","useMemo","undefined","error","console","usePooledStakingETHContract","POOLED_STAKING_ETH_ABI","useHegicContract","HEGIC_ABI","LotItem","props","useState","lotId","shares","pooledStakingETH","numberOfStakingLotsETH","setNumberOfStakingLotsETH","buttonEnabled","setButtonEnabled","useEffect","numberOfStakingLots","then","n","toNumber","button","withdrawLot","id","a","exitFromStakingLot","txReceipt","wait","activeButton","Button","style","marginLeft","color","fontWeight","fontFamily","letterSpacing","background","borderImageSource","borderImageSlice","borderStyle","boxSizing","borderRadius","borderImageWidth","size","disabled","onClick","utils","commify","formatEther","margin","outline","percentage","BigNumber","from","div","ListGroupItem","textAlign","backgroundColor","border","ListGroupItemHeading","Badge","pill","fontSize","Progress","multi","bar","value","YourLotsTab","chainId","lotItems","setLotItems","profit","setProfit","statusMsg","setStatusMsg","claimButtonDisabled","setClaimButtonDisabled","createlotItems","x","items","balanceOf","isZero","getStakingLotShares","sharesInNextStakingLot","i","push","key","toString","waitAndUpdate","txRequest","log","hash","claimProfit","profitOf","bn","StatusMsg","Alert","Row","Col","sm","Card","body","CardTitle","CardText","display","flexDirection","ListGroup","maxHeight","overflow","overflowX","overflowY","DepositTab","formatBN","HEGIC","amountToDeposit","setAmountToDeposit","balanceSHEGIC","setBalanceSHEGIC","numberOfSharesInLastLot","setNumberOfSharesInLastLot","setNumberOfStakingLots","totalBalance","setTotalBalance","lockedBalance","setLockedBalance","sharesInLastLot","setSharesInLastLot","availablePercentage","setAvailablePercentage","pendingPercentage","setPendingPercentage","allowance","setAllowance","depositButtonEnabled","setDepositButtonEnabled","HEGICBalance","setHEGICBalance","status","balance","parseEther","lte","constants","WeiPerEther","STAKING_LOT_PRICE_DIV_100","sub","mul","allow","amountToAllow","approve","depositHegic","deposit","filter","topics","tooltipsJSX","UncontrolledTooltip","placement","target","once","event","marginBottom","animated","InputGroup","marginTop","Input","placeholder","onFocus","onChange","InputGroupAddon","addonType","borderColor","InputGroupText","lineHeight","StatsTab","pooledStakingWBTC","POOLED_STAKING_WBTC_ABI","setEthTotalBalance","setEthLockedBalance","setWbtcTotalBalance","setWbtcLockedBalance","setEthNumberOfStakingLots","setWbtcNumberOfStakingLots","setFeeRecipient","FEE_RECIPIENT","Dashboard","stakingETH","STAKING_ETH_ABI","mintHegic","amountToMint","mintTo","sendProfit","activeTab","setActiveTab","toggle","tab","Container","md","offset","Nav","tabs","justifyContent","borderBottom","NavItem","NavLink","className","classnames","active","TabContent","TabPane","tabId","injected","InjectedConnector","supportedChainIds","Header","hegicBalance","setHegicBalance","ETHBalance","setETHBalance","str","maxDecimalDigits","includes","parts","split","slice","truncateEtherValue","filter_inputs","hexZeroPad","filter_outputs","on","getBalance","Wallet","zIndex","len","length","substring","truncateAddress","disconnect","connect","Navbar","Intro","minHeight","textTransform","getLibrary","provider","connector","providers","Web3Provider","App","context","activate","deactivate","React","activatingConnector","setActivatingConnector","suppress","ethereum","window","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","catch","useEagerConnect","backgroundImage","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5cdde958.chunk.js","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { useMemo } from 'react'\nimport { ethers } from 'ethers'\n\nimport { abi as POOLED_STAKING_ETH_ABI } from './json/HegicPooledStakingETH.json'\nimport { abi as POOLED_STAKING_WBTC_ABI } from './json/HegicPooledStakingWBTC.json'\nimport { abi as STAKING_ETH_ABI } from './json/FakeHegicStakingETH.json'\nimport { abi as HEGIC_ABI } from './json/FakeHEGIC.json'\n\n// TEST1 CONTRACTS\n// const POOLED_STAKING_ETH_ADDRESS = '0x47B7C230E8624eB598046DB751A7abDE891df95a'\n// const POOLED_STAKING_WBTC_ADDRESS = '0xa3ae456c6b1487f1C0dB5592C72eAcD7DC1759fe'\n// const STAKING_ETH_ADDRESS = '0xdDEA8F9e69B05C1aAbeeb58d221652A3B92d613C'\n// const HEGIC_ADDRESS = '0xaA2A5976a9E9D3d6E4664145F97105881C16c0B9'\n\n// FAKE CONTRACTS\nconst POOLED_STAKING_ETH_ADDRESS = '0x6343f5A184be34306f18A7Ef7a3330a43cf733d7'\nconst POOLED_STAKING_WBTC_ADDRESS = '0x2e7Fc37Fc94e16BBFeABd65B94506BCA93136e3c'\nconst STAKING_ETH_ADDRESS = '0x55BB507c5B1e3E67DE2fc790A36FC81016571250'\nconst HEGIC_ADDRESS = '0xaA2A5976a9E9D3d6E4664145F97105881C16c0B9'\n\n// returns null on errors\nfunction getContract(address, ABI, library, account) {\n    return new ethers.Contract(address, ABI, library.getSigner(account))\n}\n\nfunction useContract(address, ABI, withSignerIfPossible = true) {\n    const { library, account } = useWeb3React()\n  \n    return useMemo(() => {\n      if (!address || !ABI || !library) return null\n      try {\n        return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n      } catch (error) {\n        console.error('Failed to get contract', error)\n        return null\n      }\n    }, [address, ABI, library, withSignerIfPossible, account])\n  } \n\n  export function usePooledStakingETHContract() {\n    return useContract(POOLED_STAKING_ETH_ADDRESS, POOLED_STAKING_ETH_ABI);\n}\n\nexport function usePooledStakingWBTCContract() {\n    return useContract(POOLED_STAKING_WBTC_ADDRESS, POOLED_STAKING_WBTC_ABI);\n}\n\nexport function useStakingETHContract() {\n    return useContract(STAKING_ETH_ADDRESS, STAKING_ETH_ABI);\n}\n\nexport function useHegicContract() {\n    return useContract(HEGIC_ADDRESS, HEGIC_ABI);\n}","import React, {useEffect, useState} from 'react'\nimport { BigNumber, ethers } from 'ethers'\nimport { usePooledStakingETHContract } from '../../contracts/useContract';\nimport { Badge, ListGroupItem, ListGroupItemHeading, Progress, Button } from 'reactstrap'\n\nfunction LotItem(props) {\n    const [lotId] = useState(props.lotId);\n    const [shares] = useState(props.shares);\n    const pooledStakingETH = usePooledStakingETHContract();\n    const [numberOfStakingLotsETH, setNumberOfStakingLotsETH] = useState(0);\n    const [buttonEnabled, setButtonEnabled] = useState(true);\n\n    useEffect(() => {\n        pooledStakingETH.numberOfStakingLots().then((n) => {\n            setNumberOfStakingLotsETH(n.toNumber())\n        })\n    }, [pooledStakingETH])\n\n    const withdrawLot = async (id) => {\n        const txReceipt = await pooledStakingETH.exitFromStakingLot(id)\n        setButtonEnabled(false);\n        await txReceipt.wait()\n    }\n\n    let button;\n        if((shares > 0 && props.activeButton) || lotId == numberOfStakingLotsETH) \n        button = (\n            <Button style={{\n                marginLeft:'10px',\n                color:'#15203d',\n                fontWeight:'bold',\n                fontFamily:'Jura',\n                letterSpacing:'.1em',\n                background:'transparent',\n                borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                borderImageSlice:'20',\n                borderStyle:'solid',\n                boxSizing:'border-box',\n                borderRadius:'2px',\n                borderImageWidth:'50px'}} size=\"sm\" disabled={!buttonEnabled} onClick={() => withdrawLot(lotId)}>\n                WITHDRAW {ethers.utils.commify(ethers.utils.formatEther(shares))} HEGIC\n            </Button>\n        );\n        else if (!props.activeButton && lotId != numberOfStakingLotsETH)\n            button = (\n                <Button style={{margin:'3px'}} outline disabled size=\"sm\">\n                    Withdraw unused funds\n                </Button>\n            )\n        else\n            button = (\n                <Button style={{margin:'3px'}} outline disabled size=\"sm\">\n                    No HEGIC staked in lot\n                </Button>\n            )\n        \n        const percentage = ethers.BigNumber.from(shares)\n                            .div(ethers.BigNumber.from('888000000000000000000')).toNumber()/10;\n        return (\n            <ListGroupItem style={{textAlign:'left', backgroundColor:'transparent', border:'1px solid #223265'}}>\n                    <ListGroupItemHeading>\n                        Lot {lotId} \n                        <Badge pill style={{fontSize:12, marginLeft:\"5px\"}}>{percentage}%</Badge>\n                        { lotId === numberOfStakingLotsETH ? \n                         (<Badge pill style={{fontSize:12, marginLeft:\"5px\"}} color='warning'>NOT PURCHASED</Badge>)\n                         :\n                         (null)\n                        }\n                        {button}\n                    </ListGroupItemHeading>\n                        <Progress multi>\n                            <Progress bar color=\"primary\" style={{color:'#19274d'}} value={percentage}>You</Progress>\n                            { lotId === numberOfStakingLotsETH ? \n                                (<Progress bar color=\"secondary\" value={100-percentage}>Pending</Progress>)\n                                 : \n                                (<Progress bar color=\"info\" value={100-percentage}>Others</Progress>)\n                            }\n                        </Progress>\n            </ListGroupItem>\n        )\n    }\n\nexport default LotItem;","import { useWeb3React } from '@web3-react/core';\nimport React, { useState, useEffect } from 'react'\nimport { usePooledStakingETHContract } from '../../contracts/useContract';\nimport LotItem from './lotItem'\nimport { CardTitle, Row, Col, Card, ListGroup, Button, CardText, Alert } from 'reactstrap'\nimport { ethers } from 'ethers'\n\nfunction YourLotsTab () {\n    const {account, library, chainId } = useWeb3React();\n    const pooledStakingETH = usePooledStakingETHContract();\n    const [lotItems, setLotItems] = useState();\n    const [profit, setProfit] = useState(ethers.BigNumber.from('0'));\n    const [statusMsg, setStatusMsg] = useState('');\n    const [claimButtonDisabled, setClaimButtonDisabled] = useState(false);\n    const createlotItems = async () => {\n        const numberOfStakingLots = await pooledStakingETH.numberOfStakingLots().then(x => x.toNumber());\n        const items = []\n        let shares; \n        const sHEGICBalance = await pooledStakingETH.balanceOf(account);\n        if(sHEGICBalance.isZero()) \n            return (\n                <span>You have not staked your HEGIC yet. <br /> Go to \"Deposit&Stake\" tab and deposit HEGIC.</span>\n            );\n        const sharesInNextStakingLot = await pooledStakingETH.getStakingLotShares(numberOfStakingLots, account);\n        for(let i = 0; i <= numberOfStakingLots; i++){\n            shares = await pooledStakingETH.getStakingLotShares(i, account)\n            if(shares > 0)\n                items.push(<LotItem key={i} shares={shares.toString()} lotId={i} activeButton={sharesInNextStakingLot==0}></LotItem>)\n        }\n\n        return items\n    }\n\n    const waitAndUpdate = async (txRequest) => {\n        console.log(txRequest.hash)\n        setStatusMsg(\"Pending \" + txRequest.hash);\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const claimProfit = async () => {\n        const txRequest = await pooledStakingETH.claimProfit({from: account});\n        await waitAndUpdate(txRequest)\n    }\n\n    useEffect(() => {\n        if (!!account && !!library) {\n            createlotItems().then((x) => {\n                setLotItems(x);\n            })\n            \n            pooledStakingETH.profitOf(account).then(profit => {\n                setProfit(profit);\n                if(profit.isZero())\n                    setClaimButtonDisabled(true);\n            })\n        }\n    }, [account, library, chainId]);\n\n    const formatBN = (bn) => {\n        return ethers.utils.commify(ethers.utils.formatEther(bn.toString()));\n    }\n\n    const StatusMsg = () => {\n        return (\n            <>\n            { statusMsg ? (\n                <Alert color=\"primary\">\n                    {statusMsg}\n                </Alert> \n            ) : null }\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Row>\n                <Col sm=\"12\">\n                    <Card body >\n                        <CardTitle><h3>Your Staking Lots</h3></CardTitle>\n                        <CardText>\n                            In this tab you will see all the lots in which you have shares. \n                            <br />\n                            Before you exit any lot, you have to WITHDRAW unstaked funds.\n                            <br />\n                        </CardText>\n                        <CardText style={{\n                            display:'flex',\n                            flexDirection:'column',\n                            textAlign:'center'\n                            }}>\n                            <div>\n                                <b>Your profit:</b>\n                                <br />\n                                {formatBN(profit)} ETH\n                                <br /> \n                                <Button size=\"sm\" style={{\n                                marginLeft:'10px',\n                                color:'#15203d',\n                                fontWeight:'bold',\n                                fontFamily:'Jura',\n                                letterSpacing:'.1em',\n                                background:'transparent',\n                                borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                                borderImageSlice:'20',\n                                borderStyle:'solid',\n                                boxSizing:'border-box',\n                                borderRadius:'2px',\n                                borderImageWidth:'50px'}} disabled={claimButtonDisabled} onClick={claimProfit}>\n                                    CLAIM PROFIT\n                                </Button>\n                                <br />\n                                <span style={{fontSize:'12px', color:'#667fcc'}}>A performance fee (10% of profit) applies.</span> \n\n                            </div>\n                            \n                        </CardText>\n                        <StatusMsg />\n                        <ListGroup style={{textAlign:'center', maxHeight:\"300px\", overflow:\"scroll\", overflowX:'hidden', overflowY:'hidden', border:\"1px solid rgba(0, 0, 0, 0.125)\"}}>\n                            {lotItems}\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row> \n        </>\n    )\n}\n\nexport default YourLotsTab;","import { useWeb3React } from '@web3-react/core';\nimport { BigNumber, ethers } from 'ethers'\nimport React, {useState, useEffect} from 'react'\nimport { UncontrolledTooltip, Row, Col, Card, CardTitle, Alert, CardText, Input, Button, Badge, InputGroup, InputGroupAddon, InputGroupText, Progress} from 'reactstrap'\nimport { usePooledStakingETHContract, useHegicContract } from '../../contracts/useContract';\nfunction DepositTab() {\n    const {account, library, chainId } = useWeb3React();\n\n    const formatBN = (bn) => {\n        return ethers.utils.commify(ethers.utils.formatEther(bn.toString()));\n    }\n    const HEGIC = useHegicContract();\n\n    const [amountToDeposit, setAmountToDeposit] = useState(0);\n    const [balanceSHEGIC, setBalanceSHEGIC] = useState(ethers.BigNumber.from('0'));\n    const [numberOfSharesInLastLot, setNumberOfSharesInLastLot] = useState(ethers.BigNumber.from('0'));\n    const [statusMsg, setStatusMsg] = useState();\n    const pooledStakingETH = usePooledStakingETHContract();\n    const [numberOfStakingLots, setNumberOfStakingLots] = useState(ethers.BigNumber.from('0'));\n    const [totalBalance, setTotalBalance] = useState(ethers.BigNumber.from('0'));\n    const [lockedBalance, setLockedBalance] = useState(ethers.BigNumber.from('0'));\n    const [sharesInLastLot, setSharesInLastLot] = useState(ethers.BigNumber.from('0'));\n    const [availablePercentage, setAvailablePercentage] = useState(0);\n    const [pendingPercentage, setPendingPercentage] = useState(0);\n    const [allowance, setAllowance] = useState();\n    const [depositButtonEnabled, setDepositButtonEnabled] = useState(false);\n    const [HEGICBalance, setHEGICBalance] = useState(ethers.BigNumber.from('0'));\n\n    useEffect(() => {\n        let status = true;\n        status = status && amountToDeposit > 0 && amountToDeposit < 888000;\n\n        HEGIC.balanceOf(account).then((balance) => {\n            status = status && ethers.utils.parseEther(amountToDeposit).lte(balance);\n            setDepositButtonEnabled(status);\n        });\n\n    }, [account, library, chainId, amountToDeposit, allowance])\n\n    useEffect(() => {\n      HEGIC.allowance(account, pooledStakingETH.address).then(x => {\n        setAllowance(x.isZero())\n      })\n      \n    }, [account, allowance]);\n\n    useEffect(() => {\n        if(!!account && !!library)\n            pooledStakingETH.balanceOf(account).then((balance) => setBalanceSHEGIC(balance));\n    }, [account, library, chainId, pooledStakingETH]);\n\n    useEffect(() => {\n        if(!!account && !!library){\n            HEGIC.balanceOf(account).then((balance) => {\n                setHEGICBalance(balance);\n                setAmountToDeposit(balance.div(ethers.constants.WeiPerEther).toString());\n            });\n            pooledStakingETH.totalBalance().then((balance) => setTotalBalance(balance));\n            pooledStakingETH.lockedBalance().then((balance) => setLockedBalance(balance));\n            pooledStakingETH.numberOfStakingLots().then(n => {\n                setNumberOfStakingLots(n)\n                const STAKING_LOT_PRICE_DIV_100 = ethers.BigNumber.from('8880000000000000000000'); // divided by 100\n                pooledStakingETH.getStakingLotShares(n, account)\n                .then(shares => {\n                    setNumberOfSharesInLastLot(shares);\n                    setSharesInLastLot(shares.div(STAKING_LOT_PRICE_DIV_100).toNumber())\n                    });\n            });\n        }\n     }, [account, library, chainId])\n\n    useEffect(() => {\n        if(!totalBalance.isZero()){\n            const availablePercentage = totalBalance.sub(lockedBalance).mul(ethers.BigNumber.from('100')).div(ethers.utils.parseEther('888000')).toNumber();\n            const pendingPercentage = 100 - availablePercentage;\n\n\n            setAvailablePercentage(availablePercentage);\n            setPendingPercentage(pendingPercentage);\n        }\n    }, [totalBalance, lockedBalance, numberOfStakingLots, sharesInLastLot])\n\n    const allow = async () => {\n        const amountToAllow = ethers.BigNumber.from(\"88700000000000000000000000\");\n        const txRequest = await HEGIC.approve(pooledStakingETH.address, amountToAllow);\n        \n        await waitAndUpdate(txRequest);\n      }\n\n    const waitAndUpdate = async (txRequest) => {\n        setStatusMsg(\"Pending \"+txRequest.hash);\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const depositMax = () => {\n        setAmountToDeposit(HEGICBalance.div(ethers.constants.WeiPerEther).toString());\n    }\n\n    const depositHegic = async () => {\n        const txRequest = await pooledStakingETH.deposit(ethers.utils.parseEther(amountToDeposit));\n        setAmountToDeposit(0);\n        await waitAndUpdate(txRequest);\n    }\n\n    const StatusMsg = () => {\n        return (\n            <>\n            { statusMsg ? (\n                <Alert color=\"primary\">\n                    {statusMsg}\n                </Alert> \n            ) : null }\n            </>\n        );\n    }\n\n    const filter = {\n        address: '0x47B7C230E8624eB598046DB751A7abDE891df95a',\n        topics: [\n            ethers.utils.id(\"Deposit(address,uint256)\")\n        ]\n    }\n    \n    const tooltipsJSX = (<>\n        <UncontrolledTooltip placement=\"bottom\" target=\"progress-others\" >\n            Others: {formatBN(totalBalance.sub(lockedBalance).sub(balanceSHEGIC))} HEGIC\n        </UncontrolledTooltip>\n        <UncontrolledTooltip placement=\"bottom\" target=\"progress-pending\" >\n            Pending: {formatBN(ethers.utils.parseEther('888000').sub(totalBalance.sub(lockedBalance)))} HEGIC\n        </UncontrolledTooltip>\n      </>);\n\n\n    library.once(filter, (log, event) => {\n        pooledStakingETH.totalBalance().then((balance) => setTotalBalance(balance));\n    });\n\n    return (\n        <Row>\n        <Col sm=\"12\">\n            <Card body>\n                <CardTitle><h3>Stake $HEGIC</h3></CardTitle>\n\n                <CardText>\n                    <Badge color=\"primary\">You have {formatBN(balanceSHEGIC)} sHEGIC</Badge>\n                </CardText>\n\n                <CardText>\n                    Deposit your $HEGIC in the pool and start earning fees generated by the Hegic Protocol.<br />\n                    1. Deposit your $HEGIC<br />\n                    2. When deposited amount reaches the Staking Lot Price, the contract will buy a Hegic Staking Lot<br />\n                    3. Earn Hegic Protocol fees <br />\n               </CardText>\n                    <>\n                    <h5>Next Lot</h5> \n                    <Badge style={{marginBottom:'5px'}}>{ formatBN(ethers.utils.parseEther('888000').sub(totalBalance.sub(lockedBalance)).toString())} HEGIC until next Staking Lot purchase</Badge>\n                    { totalBalance.toString() == '0' ? null : (\n                    <>\n                        { sharesInLastLot.toString() == '0' ? (\n                            <>\n                            <Progress multi>\n                                <Progress bar id='progress-others' style={{color:'#19274d'}} color=\"warning\" value={availablePercentage}>Others</Progress>\n                                <Progress bar animated id='progress-pending' color=\"secondary\" value={pendingPercentage}>Pending</Progress>\n                            </Progress>\n                            {tooltipsJSX}\n                            </>\n                        ) : (<>\n                            <Progress multi>\n                                <Progress bar id='progress-others' style={{color:'#19274d'}} color=\"warning\" value={availablePercentage-sharesInLastLot}>Others</Progress>\n                                <Progress bar id='progress-you' style={{color:'#19274d'}} color=\"primary\" value={sharesInLastLot}>You</Progress>\n                                <Progress bar animated id='progress-pending' color=\"secondary\" value={pendingPercentage}>Pending</Progress>\n                            </Progress>\n                            {tooltipsJSX}\n                            <UncontrolledTooltip placement=\"bottom\" target=\"progress-you\" >\n                                You: {formatBN(numberOfSharesInLastLot)} HEGIC\n                            </UncontrolledTooltip>\n                          </>\n                        ) }\n\n                    </>\n                    )}\n                    </>\n                <InputGroup style={{marginTop:'15px'}}>\n                    <Input placeholder=\"0\" \n                    onFocus={(event) => event.target.value = ''}\n                    value={amountToDeposit}\n                    onChange={(event) => {\n                        setAmountToDeposit(event.target.value || '0')\n                    }}/>\n                    <InputGroupAddon addonType='append'>\n                    <Button style={{\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderColor:'#45fff4',\n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} onClick={depositMax}>MAX</Button>\n                    </InputGroupAddon>\n                    <InputGroupAddon addonType=\"append\">\n                    <InputGroupText>HEGIC</InputGroupText>\n                    </InputGroupAddon>  \n                </InputGroup>\n                { allowance ?\n                    (<Button style={{\n                        marginTop:'10px',\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} onClick={allow}>APPROVE HEGIC</Button>)\n                    :\n                    ( null ) \n                }\n                <Button style={{\n                        marginTop:'10px',\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} disabled={ !depositButtonEnabled ? true : false } onClick={depositHegic}><b>DEPOSIT</b></Button>\n                <StatusMsg />\n                <div style={{textAlign:'center', lineHeight:'75%'}}>\n                    <br></br>\n                    <span style={{fontSize:'12px', color:'#667fcc'}}>A performance fee (10% of profit) applies.</span> \n                    <br/><span style={{fontSize:'12px', color:'#667fcc'}}>You can withdraw your unused funds for free anytime. If a lot is purchased, you will have to wait 2</span> \n                </div>\n            </Card>\n        </Col>\n      </Row>\n    )\n}\n\nexport default DepositTab;","import React, { useEffect, useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { useWeb3React } from '@web3-react/core';\nimport { usePooledStakingETHContract, usePooledStakingWBTCContract } from '../../contracts/useContract';\nimport { Row, Col, Card, CardTitle, CardText } from 'reactstrap'\n\nfunction StatsTab() {\n    const {account, library} = useWeb3React();\n    const pooledStakingETH = usePooledStakingETHContract();\n    const pooledStakingWBTC = usePooledStakingWBTCContract();\n    \n    const [ethTotalBalance, setEthTotalBalance] = useState()\n    const [ethLockedBalance, setEthLockedBalance] = useState()\n    const [wbtcTotalBalance, setWbtcTotalBalance] = useState()\n    const [wbtcLockedBalance, setWbtcLockedBalance] = useState()\n    const [ethNumberOfStakingLots, setEthNumberOfStakingLots] = useState()\n    const [wbtcNumberOfStakingLots, setWbtcNumberOfStakingLots] = useState()\n    const [feeRecipient, setFeeRecipient] = useState();\n\n    useEffect(() => {\n        if(!!account && !!library){\n            pooledStakingETH.totalBalance().then((x) => setEthTotalBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingETH.lockedBalance().then((x) => setEthLockedBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingWBTC.totalBalance().then((x) => setWbtcTotalBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingWBTC.lockedBalance().then((x) => setWbtcLockedBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingETH.numberOfStakingLots().then((x) => setEthNumberOfStakingLots(x.toString()));\n            pooledStakingWBTC.numberOfStakingLots().then((x) => setWbtcNumberOfStakingLots(x.toString()));\n            pooledStakingETH.FEE_RECIPIENT().then((x) => setFeeRecipient(x));\n        }\n    });\n    \n    return (\n        <Row>\n            <Col sm=\"12\">\n            <Card body>\n                <CardTitle><h3>Stats</h3></CardTitle>\n                <CardText style={{textAlign:'center'}}>\n                    <h2>COMING SOON!</h2>\n                </CardText>\n                    {/* <span>Fee recipient is {feeRecipient}</span><br></br>\n                    <span>ETH {ethLockedBalance}/{ethTotalBalance}</span><br></br>\n                    <span>WBTC {wbtcLockedBalance}/{wbtcTotalBalance}</span><br></br>\n                    <span>Number of staking lots ETH {ethNumberOfStakingLots}</span><br></br>\n                    <span>Number of staking lots WBTC {wbtcNumberOfStakingLots}</span> */}\n                </Card>\n            </Col>\n        </Row>\n\n    );\n}\nexport default StatsTab;","import React, { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useHegicContract, usePooledStakingETHContract, useStakingETHContract } from '../contracts/useContract'\nimport { Container, Row, Col } from 'reactstrap'\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Button } from 'reactstrap';\nimport classnames from 'classnames'\n\nimport YourLotsTab from './tabs/yourLotsTab'\nimport DepositTab from './tabs/depositTab'\nimport StatsTab from './tabs/statsTab'\n\nfunction Dashboard() {\n  const { account } = useWeb3React()\n  const HEGIC = useHegicContract();\n  const pooledStakingETH = usePooledStakingETHContract();\n  const stakingETH = useStakingETHContract();\n\n  const waitAndUpdate = async (txRequest) => {\n    console.log(txRequest.hash)\n    await txRequest.wait();\n  }\n\n  const mintHegic = async () => {\n    const amountToMint = ethers.BigNumber.from(\"300000000000000000000000\");\n    const txRequest = await HEGIC.mintTo(account, amountToMint);\n    await waitAndUpdate(txRequest)\n  }\n\n  const sendProfit = async () => {\n    const txRequest = await stakingETH.sendProfit({ value: ethers.utils.parseEther(\"0.1\") })\n    await waitAndUpdate(txRequest)\n  }\n\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  }\n\n  return (\n    <Container >\n      <Row style={{ marginTop: \"5vh\" }}>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n          <div>\n            <Nav tabs style={{ justifyContent: \"center\", borderBottom: 0 }}>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '1' })}\n                  onClick={() => { toggle('1'); }}\n                >\n                  Deposit {\"&\"} Stake\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '2' })}\n                  onClick={() => { toggle('2'); }}\n                >\n                  Your Staking Lots\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '3' })}\n                  onClick={() => { toggle('3'); }}\n                >\n                  Stats\n                </NavLink>\n              </NavItem>\n            </Nav>\n            <TabContent activeTab={activeTab}>\n              <TabPane tabId=\"1\">\n                <DepositTab />\n              </TabPane>\n              <TabPane tabId=\"2\">\n                <YourLotsTab />\n              </TabPane>\n              <TabPane tabId=\"3\">\n                <StatsTab />\n              </TabPane>\n            </TabContent>\n          </div>\n        </Col>\n      </Row>\n      <Row style={{marginBottom:'5vh'}}>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }} style={{display:'flex', justifyContent:'center'}}>\n        <Button size=\"sm\" onClick={mintHegic}>Mint 300k HEGIC</Button>\n        <Button size=\"sm\" onClick={sendProfit}>Send Profit (0.1ETH)</Button>\n        {/* <span><a href=\"#\">About</a></span> */}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Dashboard;","import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n","import React, { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useHegicContract } from '../contracts/useContract'\nimport { ethers } from 'ethers';\nimport { injected } from '../connectors'\nimport { useEagerConnect, useInactiveListener } from '../hooks'\nimport { Badge, Button, Col, Navbar} from 'reactstrap';\nimport { checkProperties, hexZeroPad } from 'ethers/lib/utils';\n\nfunction Header(props) {\n    const { account, library, chainId, active } = useWeb3React();\n    const HEGIC = useHegicContract();\n\n    const [hegicBalance, setHegicBalance] = useState(0);\n    const [ETHBalance, setETHBalance] = useState(0);\n\n    const truncateEtherValue = (str, maxDecimalDigits) => {\n        if (str.includes(\".\")) {\n        const parts = str.split(\".\");\n        return parts[0] + \".\" + parts[1].slice(0, maxDecimalDigits);\n        }\n        return str;\n    };\n    \n    const formatBN = (bn) => {\n        return truncateEtherValue(ethers.utils.commify(ethers.utils.formatEther(bn.toString())), 4);\n    }\n\n    const truncateAddress = (str) => {\n        const len = str.length;\n        return str.substring(0, 8) + '...' + str.substring(len-7, len-1);\n    }\n\n    useEffect(() => {\n        if(!!account && !!library) {\n            HEGIC.balanceOf(account).then((balance) => setHegicBalance(balance));\n            const filter_inputs = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Transfer(address,address,uint256)\"),\n                    null,\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            const filter_outputs = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Transfer(address,address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n            \n            library.on(filter_inputs, (log, event) => {\n                HEGIC.balanceOf(account).then((balance) => {\n                    setHegicBalance(balance)\n                });\n            });\n\n            library.on(filter_outputs, (log, event) => {\n                HEGIC.balanceOf(account).then((balance) => {\n                    setHegicBalance(balance)\n                });\n            });\n        }\n            \n\n    }, [account, library, chainId])\n\n    useEffect(() => {\n        if(!!account && !!library)\n            library.getBalance(account).then((balance) => setETHBalance(balance))\n    }, [account, library, chainId])\n\n    const Wallet = () => {\n        return (\n            <>\n                <Col sm='0' md={{size:2, offset:5}} style={{display:'flex', justifyContent:'center'}}>\n                    <h3 style={{color:'#45fff4', zIndex:'99', fontFamily:'Jura', fontWeight:'bold'}}>HEGIC</h3>\n                </Col>\n                <Col sm='12' md={{size:5, offset:0}} style={{display:'flex', justifyContent:'flex-end'}}>\n                { active ? (\n                    <div>\n                        <Badge color=\"primary\" style={{margin:\"2.5px\"}}>{formatBN(hegicBalance)} HEGIC </Badge>\n                        <Badge color=\"secondary\" style={{margin:\"2.5px\"}}>{formatBN(ETHBalance)} ETH </Badge>\n                        <span style={{color:'#defefe', fontSize:'12px'}}>{truncateAddress(account)}</span>\n                        <Button color=\"link\" onClick={props.disconnect}>Disconnect</Button>\n                    </div>\n                ) : (\n                    <Button color=\"link\" onClick={props.connect}>Connect</Button>\n                )}\n                </Col>\n            </>\n        )\n    }\n    \n    return (\n            <Navbar style={{display:'flex', backgroundColor:'#19274d', borderBottom: '1px solid #45fff4'}}>\n                <Wallet />\n            </Navbar>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { Row, Container, Col, Button } from 'reactstrap';\n\nfunction Intro(props) {\n\n    return (\n    <Container>\n        <Row style={{marginTop:'10vh', minHeight:'50vh', zIndex:'-1'}}>\n            <Col sm='12' md={{ size: 6, offset: 3}}>\n                    <h1 style={{\n                        color:'#45fff4',\n                        fontFamily:'Jura',\n                        fontWeight:'bold',\n                        lineHeight:'125%',\n                        fontSize:'46px',\n                        textTransform:'uppercase'\n                        }}>Hegic Staking Lots for everyone</h1>\n                    <div style={{color: '#defefe', fontFamily:'Exo 2', fontWeight:'500', lineHeight:'150%'}}>\n                    Hegic Protocol generates fees that are distributed among Hegic Staking Lot owners.\n                    Those staking lots are priced at 888,000 HEGIC, being simply unreachable for most of HEGIC holders.\n                    Thanks to <b>Staking Pools</b> you can own a share of a staking lot and earn fees that were reserved\n                    for whales only. \n                    </div>\n                    <div style={{marginTop:'25px', display:'flex', justifyContent:'center'}}>\n                    <Button style={{\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} \n                        onClick={props.connect}>CONNECT WALLET</Button>\n                    </div>\n            </Col>\n        </Row>\n    </Container>);\n}\n\nexport default Intro;","import React from 'react';\nimport Dashboard from './components/dashboard';\nimport Header from './components/header'\nimport Intro from './components/intro'\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core'\nimport { ethers } from 'ethers';\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { injected } from './connectors';\n\nfunction getLibrary(provider, connector) {\n  return new ethers.providers.Web3Provider(provider)\n}\n\nfunction App() {\n  const context = useWeb3React()\n  const { connector, active, activate, deactivate } = context\n\n    // handle logic to recognize the connector currently being activated\n    const [activatingConnector, setActivatingConnector] = React.useState()\n    React.useEffect(() => {\n      if (activatingConnector && activatingConnector === connector) {\n        setActivatingConnector(undefined)\n      }\n    }, [activatingConnector, connector])\n  \n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    const triedEager = useEagerConnect()\n  \n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager || !!activatingConnector)\n  \n    function connect() {\n        setActivatingConnector(injected)\n        activate(injected)\n    }\n    \n    function disconnect() {\n      deactivate(injected)\n    }\n  return (\n  <div style={{ background:'radial-gradient(68.28% 53.52% at 50% 50%, #1c2a4f 0%, #111b35 100%)'}}>\n      <div style={{backgroundImage:'url(https://www.hegic.co/assets/img/background-image.svg)', height:'100vh'}}>\n          <Header connect={connect} disconnect={disconnect}/>\n          { active ? (\n            <Dashboard />\n          ) : (\n            <Intro connect={connect} />\n          )}\n          {/* <Stats /> */}\n      </div>\n  </div>\n\n  );\n}\n\n\nexport default () => (\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n  </Web3ReactProvider>\n)\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React()\n  \n    const [tried, setTried] = useState(false)\n  \n    useEffect(() => {\n      injected.isAuthorized().then((isAuthorized) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      })\n    }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n  \n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n      if (!tried && active) {\n        setTried(true)\n      }\n    }, [tried, active])\n  \n    return tried\n  }\n  \n  export function useInactiveListener(suppress = false) {\n    const { active, error, activate } = useWeb3React()\n  \n    useEffect(() => {\n      const { ethereum } = window\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\n        const handleConnect = () => {\n          console.log(\"Handling 'connect' event\")\n          activate(injected)\n        }\n        const handleChainChanged = (chainId) => {\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\n          activate(injected)\n        }\n        const handleAccountsChanged = (accounts) => {\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n          if (accounts.length > 0) {\n            activate(injected)\n          }\n        }\n        const handleNetworkChanged = (networkId) => {\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\n          activate(injected)\n        }\n  \n        ethereum.on('connect', handleConnect)\n        ethereum.on('chainChanged', handleChainChanged)\n        ethereum.on('accountsChanged', handleAccountsChanged)\n        ethereum.on('networkChanged', handleNetworkChanged)\n  \n        return () => {\n          if (ethereum.removeListener) {\n            ethereum.removeListener('connect', handleConnect)\n            ethereum.removeListener('chainChanged', handleChainChanged)\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\n          }\n        }\n      }\n    }, [active, error, suppress, activate])\n  }\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
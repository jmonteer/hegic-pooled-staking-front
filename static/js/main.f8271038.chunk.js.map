{"version":3,"sources":["contracts/useContract.js","components/tabs/lotItem.js","components/tabs/yourLotsTab.js","components/tabs/depositTab.js","components/tabs/statsTab.js","components/dashboard.js","connectors.js","components/header.js","components/intro.js","App.js","hooks.js","serviceWorker.js","index.js"],"names":["getContract","address","ABI","library","account","ethers","Contract","getSigner","useContract","withSignerIfPossible","useWeb3React","useMemo","undefined","error","console","usePooledStakingETHContract","POOLED_STAKING_ETH_ABI","useHegicContract","HEGIC_ABI","LotItem","props","useState","lotId","shares","pooledStakingETH","numberOfStakingLotsETH","setNumberOfStakingLotsETH","useEffect","numberOfStakingLots","then","n","toNumber","button","withdrawLot","id","a","exitFromStakingLot","txReceipt","log","hash","wait","Button","style","margin","size","onClick","utils","commify","formatEther","outline","disabled","percentage","BigNumber","from","div","ListGroupItem","backgroundColor","border","ListGroupItemHeading","Badge","pill","fontSize","Progress","multi","bar","color","value","YourLotsTab","chainId","lotItems","setLotItems","profit","setProfit","statusMsg","setStatusMsg","createlotItems","x","items","i","getStakingLotShares","push","key","toString","waitAndUpdate","txRequest","claimProfit","payProfit","profitOf","bn","StatusMsg","Alert","Row","Col","sm","Card","body","CardTitle","CardText","ListGroup","maxHeight","overflow","DepositTab","amountToDeposit","setAmountToDeposit","balanceSHEGIC","setBalanceSHEGIC","balanceOf","balance","depositHegic","deposit","InputGroup","Input","placeholder","min","max","type","step","onChange","event","parseEther","target","InputGroupAddon","addonType","InputGroupText","marginTop","fontWeight","fontFamily","letterSpacing","background","borderImageSource","borderImageSlice","borderStyle","boxSizing","borderRadius","borderImageWidth","StatsTab","pooledStakingWBTC","POOLED_STAKING_WBTC_ABI","ethTotalBalance","setEthTotalBalance","ethLockedBalance","setEthLockedBalance","wbtcTotalBalance","setWbtcTotalBalance","wbtcLockedBalance","setWbtcLockedBalance","ethNumberOfStakingLots","setEthNumberOfStakingLots","wbtcNumberOfStakingLots","setWbtcNumberOfStakingLots","feeRecipient","setFeeRecipient","totalBalance","lockedBalance","FEE_RECIPIENT","Dashboard","HEGIC","stakingETH","STAKING_ETH_ABI","mintHegic","amountToMint","mintTo","allow","amountToAllow","approve","sendProfit","activeTab","setActiveTab","toggle","tab","Container","md","offset","Nav","tabs","justifyContent","borderBottom","NavItem","NavLink","className","classnames","active","TabContent","TabPane","tabId","display","injected","InjectedConnector","supportedChainIds","Header","hegicBalance","setHegicBalance","ETHBalance","setETHBalance","formatBN","str","maxDecimalDigits","includes","parts","split","slice","truncateEtherValue","getBalance","Wallet","zIndex","len","length","substring","truncateAddress","disconnect","connect","Navbar","Intro","minHeight","lineHeight","textTransform","getLibrary","provider","connector","providers","Web3Provider","App","context","activate","deactivate","React","activatingConnector","setActivatingConnector","suppress","ethereum","window","on","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","catch","useEagerConnect","backgroundImage","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f8271038.chunk.js","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { useMemo } from 'react'\nimport { ethers } from 'ethers'\n\nimport { abi as POOLED_STAKING_ETH_ABI } from './json/HegicPooledStakingETH.json'\nimport { abi as POOLED_STAKING_WBTC_ABI } from './json/HegicPooledStakingWBTC.json'\nimport { abi as STAKING_ETH_ABI } from './json/FakeHegicStakingETH.json'\nimport { abi as HEGIC_ABI } from './json/FakeHEGIC.json'\n\nconst POOLED_STAKING_ETH_ADDRESS = '0x72b12b5AaC48FB1CB64f64Ab5c0e1E18F36abCe6'\nconst POOLED_STAKING_WBTC_ADDRESS = '0x0a4fa96d217C7BeC89909232e5934733e54C6Be5'\nconst STAKING_ETH_ADDRESS = '0xd05f7b1798c96013699D52b13286DeC326f971a7'\nconst HEGIC_ADDRESS = '0xc39Bd82C93F6B91dd391c72425403c599375FfF9'\n\n// returns null on errors\nfunction getContract(address, ABI, library, account) {\n    return new ethers.Contract(address, ABI, library.getSigner(account))\n}\n\nfunction useContract(address, ABI, withSignerIfPossible = true) {\n    const { library, account } = useWeb3React()\n  \n    return useMemo(() => {\n      if (!address || !ABI || !library) return null\n      try {\n        return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n      } catch (error) {\n        console.error('Failed to get contract', error)\n        return null\n      }\n    }, [address, ABI, library, withSignerIfPossible, account])\n  } \n\n  export function usePooledStakingETHContract() {\n    return useContract(POOLED_STAKING_ETH_ADDRESS, POOLED_STAKING_ETH_ABI);\n}\n\nexport function usePooledStakingWBTCContract() {\n    return useContract(POOLED_STAKING_WBTC_ADDRESS, POOLED_STAKING_WBTC_ABI);\n}\n\nexport function useStakingETHContract() {\n    return useContract(STAKING_ETH_ADDRESS, STAKING_ETH_ABI);\n}\n\nexport function useHegicContract() {\n    return useContract(HEGIC_ADDRESS, HEGIC_ABI);\n}","import React, {useEffect, useState} from 'react'\nimport { ethers } from 'ethers'\nimport { usePooledStakingETHContract } from '../../contracts/useContract';\nimport { Badge, ListGroupItem, ListGroupItemHeading, Progress, Button } from 'reactstrap'\n\nfunction LotItem(props) {\n    const [lotId] = useState(props.lotId);\n    const [shares] = useState(props.shares);\n    const pooledStakingETH = usePooledStakingETHContract();\n    const [numberOfStakingLotsETH, setNumberOfStakingLotsETH] = useState(0);\n\n    useEffect(() => {\n        pooledStakingETH.numberOfStakingLots().then((n) => {\n            setNumberOfStakingLotsETH(n.toNumber())\n        })\n    }, [pooledStakingETH])\n\n    \n\n    const withdrawLot = async (id) => {\n        const txReceipt = await pooledStakingETH.exitFromStakingLot(id)\n        console.log(\"Pending\", txReceipt.hash)\n        await txReceipt.wait()\n        console.log(\"Done \", txReceipt.hash)\n    }\n\n    let button;\n        if(shares > 0) \n        button = (\n            <Button style={{margin:'3px'}} size=\"sm\" onClick={() => withdrawLot(lotId)}>\n                Withdraw {ethers.utils.commify(ethers.utils.formatEther(shares))} HEGIC\n            </Button>\n        );\n        else\n            button = (\n                <Button style={{margin:'3px'}} outline disabled size=\"sm\">\n                    No HEGIC staked in lot\n                </Button>\n            )\n        \n        const percentage = ethers.BigNumber.from(shares)\n                            .div(ethers.BigNumber.from('888000000000000000000')).toNumber()/10;\n        return (\n            <ListGroupItem style={{backgroundColor:'transparent', border:'1px solid #223265'}}>\n                    <ListGroupItemHeading>Lot {lotId} <Badge pill style={{fontSize:12}}>{percentage}%</Badge>{button}</ListGroupItemHeading>\n                        <Progress multi>\n                            <Progress bar color=\"warning\" value={percentage}>You</Progress>\n                            { lotId === numberOfStakingLotsETH ? \n                                (<Progress bar color=\"secondary\" value={100-percentage}></Progress>)\n                                 : \n                                (<Progress bar color=\"info\" value={100-percentage}>Others</Progress>)\n                            }\n                        </Progress>\n            </ListGroupItem>\n        )\n    }\n\nexport default LotItem;","import { useWeb3React } from '@web3-react/core';\nimport React, { useState, useEffect } from 'react'\nimport { usePooledStakingETHContract } from '../../contracts/useContract';\nimport LotItem from './lotItem'\nimport { CardTitle, Row, Col, Card, ListGroup, Button, CardText, Alert } from 'reactstrap'\nimport { ethers } from 'ethers'\n\nfunction YourLotsTab () {\n\n    const {account, library, chainId } = useWeb3React();\n    const pooledStakingETH = usePooledStakingETHContract();\n    const [lotItems, setLotItems] = useState();\n    const [profit, setProfit] = useState(ethers.BigNumber.from('0'));\n    const [statusMsg, setStatusMsg] = useState('');\n\n    const createlotItems = async () => {\n        const numberOfStakingLots = await pooledStakingETH.numberOfStakingLots().then(x => x.toNumber());\n        const items = []\n        let shares; \n\n        for(let i = 0; i <= numberOfStakingLots; i++){\n            shares = await pooledStakingETH.getStakingLotShares(i, account)\n            if(shares > 0)\n                items.push(<LotItem key={i} shares={shares.toString()} lotId={i}></LotItem>)\n        }\n\n        return items\n    }\n\n    const waitAndUpdate = async (txRequest) => {\n        console.log(txRequest.hash)\n        setStatusMsg(\"Pending \" + txRequest.hash);\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const claimProfit = async () => {\n        const txRequest = await pooledStakingETH.payProfit({from: account});\n        await waitAndUpdate(txRequest)\n    }\n\n    useEffect(() => {\n        if (!!account && !!library) {\n            createlotItems().then((x) => {\n                setLotItems(x);\n            })\n            \n            pooledStakingETH.profitOf(account).then(profit => {\n                setProfit(profit);\n            })\n        }\n    }, [account, library, chainId]);\n\n    const formatBN = (bn) => {\n        return ethers.utils.commify(ethers.utils.formatEther(bn.toString()));\n    }\n\n    const StatusMsg = () => {\n        return (\n            <>\n            { statusMsg ? (\n                <Alert color=\"primary\">\n                    {statusMsg}\n                </Alert> \n            ) : null }\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Row>\n                <Col sm=\"12\">\n                    <Card body >\n                        <CardTitle><h3>Your Staking Lots</h3></CardTitle>\n                        <CardText>Your profit: {formatBN(profit)} <Button size=\"sm\" onClick={claimProfit}>Claim</Button></CardText>\n                        <StatusMsg />\n                        <ListGroup style={{maxHeight:\"300px\", overflow:\"scroll\", border:\"1px solid rgba(0, 0, 0, 0.125)\"}}>\n                            {lotItems}\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row> \n        </>\n    )\n}\n\nexport default YourLotsTab;","import { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers'\nimport React, {useState, useEffect} from 'react'\nimport {Row, Col, Card, CardTitle, Alert, CardText, Input, Button, Badge, InputGroup, InputGroupAddon, InputGroupText} from 'reactstrap'\nimport { usePooledStakingETHContract } from '../../contracts/useContract';\nfunction DepositTab() {\n    const {account, library, chainId } = useWeb3React();\n\n    const formatBN = (bn) => {\n        return ethers.utils.commify(ethers.utils.formatEther(bn.toString()));\n    }\n\n    const [amountToDeposit, setAmountToDeposit] = useState(0);\n    const [balanceSHEGIC, setBalanceSHEGIC] = useState(ethers.BigNumber.from('0'));\n    const [statusMsg, setStatusMsg] = useState();\n    const pooledStakingETH = usePooledStakingETHContract();\n    \n    useEffect(() => {\n        if(!!account && !!library)\n            pooledStakingETH.balanceOf(account).then((balance) => setBalanceSHEGIC(balance));\n    }, [account, library, chainId, pooledStakingETH])\n\n    const waitAndUpdate = async (txRequest) => {\n        console.log(txRequest.hash)\n        setStatusMsg(\"Pending \"+txRequest.hash);\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const depositHegic = async () => {\n        const txRequest = await pooledStakingETH.deposit(amountToDeposit)\n        await waitAndUpdate(txRequest)\n    }\n\n    const StatusMsg = () => {\n        return (\n            <>\n            { statusMsg ? (\n                <Alert color=\"primary\">\n                    {statusMsg}\n                </Alert> \n            ) : null }\n            </>\n        );\n    }\n\n    return (\n        <Row>\n        <Col sm=\"12\">\n            <Card body>\n                <CardTitle><h3>Stake $HEGIC</h3></CardTitle>\n\n                <CardText>\n                    <Badge color=\"primary\">You have {formatBN(balanceSHEGIC)} sHEGIC</Badge>\n                </CardText>\n\n                <CardText>\n                    Deposit your $HEGIC in the pool and start earning fees generated by the Hegic Protocol.<br />\n                    1. Deposit your $HEGIC<br />\n                    2. When deposited amount reaches the Staking Lot Price, the contract will buy a Hegic Staking Lot<br />\n                    3. Earn fees and exit the pool when you want\n                </CardText>\n                <InputGroup>\n                    <Input placeholder={ethers.utils.commify(amountToDeposit)} min={0} max={100} type=\"number\" step=\"1\" onChange={(event) => setAmountToDeposit(ethers.utils.parseEther(event.target.value))}/>\n                    <InputGroupAddon addonType=\"append\">\n                    <InputGroupText>HEGIC</InputGroupText>\n                    </InputGroupAddon>  \n                </InputGroup>\n                <Button style={{\n                        marginTop:'10px',\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} onClick={depositHegic}><b>DEPOSIT</b></Button>\n                <StatusMsg />\n            </Card>\n        </Col>\n      </Row>\n    )\n}\n\nexport default DepositTab;","import React, { useEffect, useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { useWeb3React } from '@web3-react/core';\nimport { usePooledStakingETHContract, usePooledStakingWBTCContract } from '../../contracts/useContract';\nimport { Row, Col, Card, CardTitle } from 'reactstrap'\n\nfunction StatsTab() {\n    const {account, library} = useWeb3React();\n    const pooledStakingETH = usePooledStakingETHContract();\n    const pooledStakingWBTC = usePooledStakingWBTCContract();\n    \n    const [ethTotalBalance, setEthTotalBalance] = useState()\n    const [ethLockedBalance, setEthLockedBalance] = useState()\n    const [wbtcTotalBalance, setWbtcTotalBalance] = useState()\n    const [wbtcLockedBalance, setWbtcLockedBalance] = useState()\n    const [ethNumberOfStakingLots, setEthNumberOfStakingLots] = useState()\n    const [wbtcNumberOfStakingLots, setWbtcNumberOfStakingLots] = useState()\n    const [feeRecipient, setFeeRecipient] = useState();\n\n    useEffect(() => {\n        if(!!account && !!library){\n            pooledStakingETH.totalBalance().then((x) => setEthTotalBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingETH.lockedBalance().then((x) => setEthLockedBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingWBTC.totalBalance().then((x) => setWbtcTotalBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingWBTC.lockedBalance().then((x) => setWbtcLockedBalance(ethers.utils.commify(ethers.utils.formatEther(x.toString()))));\n            pooledStakingETH.numberOfStakingLots().then((x) => setEthNumberOfStakingLots(x.toString()));\n            pooledStakingWBTC.numberOfStakingLots().then((x) => setWbtcNumberOfStakingLots(x.toString()));\n            pooledStakingETH.FEE_RECIPIENT().then((x) => setFeeRecipient(x));\n        }\n    });\n    \n    return (\n        <Row>\n            <Col sm=\"12\">\n            <Card body>\n                <CardTitle><h3>Stats</h3></CardTitle>\n                    <span>Fee recipient is {feeRecipient}</span><br></br>\n                    <span>ETH {ethLockedBalance}/{ethTotalBalance}</span><br></br>\n                    <span>WBTC {wbtcLockedBalance}/{wbtcTotalBalance}</span><br></br>\n                    <span>Number of staking lots ETH {ethNumberOfStakingLots}</span><br></br>\n                    <span>Number of staking lots WBTC {wbtcNumberOfStakingLots}</span>\n                </Card>\n            </Col>\n        </Row>\n\n    );\n}\n// class Stats extends React.Component {\n//     constructor(props){\n//     super(props)\n//     this.state = {\n//         ethTotalBalance: '',\n//         ethLockedBalance: '',\n//             wbtcTotalBalance: '',\n//             wbtcLockedBalance: '',\n//             feeRecipient: '',\n//             wbtcNumberOfStakingLots: '',\n//             ethNumberOfStakingLots: ''\n//         }\n//     }\n    \n//     async componentDidMount(){\n//         const ethTotalBalance = await pooledStakingETH.totalBalance().then(x => x.toString())\n//         const ethLockedBalance = await pooledStakingETH.lockedBalance().then(x => x.toString())\n//         const wbtcTotalBalance = await pooledStakingWBTC.totalBalance().then(x => x.toString())\n//         const wbtcLockedBalance = await pooledStakingWBTC.lockedBalance().then(x => x.toString())\n//         const ethNumberOfStakingLots = await pooledStakingETH.numberOfStakingLots().then(x => x.toString())\n//         const wbtcNumberOfStakingLots = await pooledStakingWBTC.numberOfStakingLots().then(x => x.toString())\n        \n//         const feeRecipient = await pooledStakingETH.FEE_RECIPIENT();\n//         this.setState({\n//             ethLockedBalance,\n//             ethTotalBalance,\n//             wbtcLockedBalance,\n//             wbtcTotalBalance,\n//             feeRecipient,\n//             wbtcNumberOfStakingLots,\n//             ethNumberOfStakingLots\n//         });\n//     }\n\n//     render () {\n//         return (\n//             <div className=\"App-header\">\n//                 <h3>Pool Analytics</h3>\n//                 <span>Fee recipient is {this.state.feeRecipient}</span>\n//                 <span>ETH {this.state.ethLockedBalance}/{this.state.ethTotalBalance}</span>\n//                 <span>WBTC {this.state.wbtcLockedBalance}/{this.state.wbtcTotalBalance}</span>\n//                 <span>Number of staking lots ETH {this.state.ethNumberOfStakingLots}</span>\n//                 <span>Number of staking lots WBTC {this.state.wbtcNumberOfStakingLots}</span>\n//             </div>\n//         );\n//     }\n// }\n\nexport default StatsTab;","import React, { useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useHegicContract, usePooledStakingETHContract, useStakingETHContract } from '../contracts/useContract'\nimport { Container, Row, Col } from 'reactstrap'\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Button } from 'reactstrap';\nimport classnames from 'classnames'\n\nimport YourLotsTab from './tabs/yourLotsTab'\nimport DepositTab from './tabs/depositTab'\nimport StatsTab from './tabs/statsTab'\n\nfunction Dashboard() {\n  const { account } = useWeb3React()\n  const HEGIC = useHegicContract();\n  const pooledStakingETH = usePooledStakingETHContract();\n  const stakingETH = useStakingETHContract();\n\n  const waitAndUpdate = async (txRequest) => {\n    console.log(txRequest.hash)\n    await txRequest.wait();\n  }\n\n  const mintHegic = async () => {\n    const amountToMint = ethers.BigNumber.from(\"300000000000000000000000\");\n    const txRequest = await HEGIC.mintTo(account, amountToMint);\n    await waitAndUpdate(txRequest)\n  }\n\n  const allow = async () => {\n    const amountToAllow = ethers.BigNumber.from(\"88700000000000000000000000\");\n    const txRequest = await HEGIC.approve(pooledStakingETH.address, amountToAllow);\n    await waitAndUpdate(txRequest)\n  }\n\n  const sendProfit = async () => {\n    const txRequest = await stakingETH.sendProfit({ value: ethers.utils.parseEther(\"0.1\") })\n    await waitAndUpdate(txRequest)\n  }\n\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  }\n\n  return (\n    <Container>\n      <Row style={{ marginTop: \"10vh\" }}>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n          <div>\n            <Nav tabs style={{ justifyContent: \"center\", borderBottom: 0 }}>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '1' })}\n                  onClick={() => { toggle('1'); }}\n                >\n                  Deposit {\"&\"} Stake\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '2' })}\n                  onClick={() => { toggle('2'); }}\n                >\n                  Your Staking Lots\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '3' })}\n                  onClick={() => { toggle('3'); }}\n                >\n                  Stats\n                </NavLink>\n              </NavItem>\n            </Nav>\n            <TabContent activeTab={activeTab}>\n              <TabPane tabId=\"1\">\n                <DepositTab />\n              </TabPane>\n              <TabPane tabId=\"2\">\n                <YourLotsTab />\n              </TabPane>\n              <TabPane tabId=\"3\">\n                <StatsTab />\n              </TabPane>\n            </TabContent>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col  sm=\"12\" md={{ size: 6, offset: 3 }} style={{display:'flex', justifyContent:'center'}}>\n        <Button size=\"sm\" onClick={allow}>Allow HEGIC</Button>\n        <Button size=\"sm\" onClick={mintHegic}>Mint 300k HEGIC</Button>\n        <Button size=\"sm\" onClick={sendProfit}>Send Profit (0.1ETH)</Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Dashboard;","import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n","import React, { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useHegicContract } from '../contracts/useContract'\nimport { ethers } from 'ethers';\nimport { injected } from '../connectors'\nimport { useEagerConnect, useInactiveListener } from '../hooks'\nimport { Badge, Button, Col, Navbar} from 'reactstrap';\nimport { checkProperties } from 'ethers/lib/utils';\n\nfunction Header(props) {\n    const { account, library, chainId, active } = useWeb3React();\n    const HEGIC = useHegicContract();\n\n    const [hegicBalance, setHegicBalance] = useState(0);\n    const [ETHBalance, setETHBalance] = useState(0);\n\n   const truncateEtherValue = (str, maxDecimalDigits) => {\n    if (str.includes(\".\")) {\n      const parts = str.split(\".\");\n      return parts[0] + \".\" + parts[1].slice(0, maxDecimalDigits);\n    }\n    return str;\n  };\n\n    const formatBN = (bn) => {\n        return truncateEtherValue(ethers.utils.commify(ethers.utils.formatEther(bn.toString())), 4);\n    }\n\n    const truncateAddress = (str) => {\n        const len = str.length;\n        return str.substring(0, 8) + '...' + str.substring(len-7, len-1);\n    }\n\n    useEffect(() => {\n        if(!!account && !!library)\n            HEGIC.balanceOf(account).then((balance) => setHegicBalance(balance));\n    }, [account, library, chainId, HEGIC])\n\n    useEffect(() => {\n        if(!!account && !!library)\n            library.getBalance(account).then((balance) => setETHBalance(balance))\n    }, [account, library, chainId])\n\n    const Wallet = () => {\n        return (\n            <>\n                <Col sm='0' md={{size:2, offset:5}} style={{display:'flex', justifyContent:'center'}}>\n                    <h3 style={{color:'#45fff4', zIndex:'99', fontFamily:'Jura', fontWeight:'bold'}}>HEGIC</h3>\n                </Col>\n                <Col sm='12' md={{size:5, offset:0}} style={{display:'flex', justifyContent:'flex-end'}}>\n                { active ? (\n                    <div>\n                        <Badge color=\"primary\" style={{margin:\"2.5px\"}}>{formatBN(hegicBalance)} HEGIC </Badge>\n                        <Badge color=\"secondary\" style={{margin:\"2.5px\"}}>{formatBN(ETHBalance)} ETH </Badge>\n                        <span style={{color:'#defefe', fontSize:'12px'}}>{truncateAddress(account)}</span>\n                        <Button color=\"link\" onClick={props.disconnect}>Disconnect</Button>\n                    </div>\n                ) : (\n                    <Button color=\"link\" onClick={props.connect}>Connect</Button>\n                )}\n                </Col>\n            </>\n        )\n    }\n    \n    return (\n            <Navbar style={{display:'flex', backgroundColor:'#19274d', borderBottom: '1px solid #45fff4'}}>\n                <Wallet />\n            </Navbar>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { Row, Container, Col, Button } from 'reactstrap';\n\nfunction Intro(props) {\n\n    return (\n    <Container>\n        <Row style={{marginTop:'10vh', minHeight:'50vh', zIndex:'-1'}}>\n            <Col sm='12' md={{ size: 6, offset: 3}}>\n                    <h1 style={{\n                        color:'#45fff4',\n                        fontFamily:'Jura',\n                        fontWeight:'bold',\n                        lineHeight:'125%',\n                        fontSize:'46px',\n                        textTransform:'uppercase'\n                        }}>Buying Hegic Staking Lots for everyone</h1>\n                    <div style={{color: '#defefe', fontFamily:'Exo 2', fontWeight:'500', lineHeight:'150%'}}>\n                    Hegic Protocol generates fees that are distributed among Hegic Staking Lot owners.\n                    Those staking lots are priced at 888,000 HEGIC, being simply unreachable for most of HEGIC holders.\n                    Thanks to <b>Staking Pools</b> you can own a share of a staking lot and earn fees that were reserved\n                    for whales only. \n                    </div>\n                    <div style={{marginTop:'25px', display:'flex', justifyContent:'center'}}>\n                    <Button style={{\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} \n                        onClick={props.connect}>CONNECT WALLET</Button>\n                    </div>\n            </Col>\n        </Row>\n    </Container>);\n}\n\nexport default Intro;","import React from 'react';\nimport Dashboard from './components/dashboard';\nimport Header from './components/header'\nimport Intro from './components/intro'\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core'\nimport { ethers } from 'ethers';\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { injected } from './connectors';\n\nfunction getLibrary(provider, connector) {\n  return new ethers.providers.Web3Provider(provider)\n}\n\nfunction App() {\n  const context = useWeb3React()\n  const { connector, active, activate, deactivate } = context\n\n    // handle logic to recognize the connector currently being activated\n    const [activatingConnector, setActivatingConnector] = React.useState()\n    React.useEffect(() => {\n      if (activatingConnector && activatingConnector === connector) {\n        setActivatingConnector(undefined)\n      }\n    }, [activatingConnector, connector])\n  \n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    const triedEager = useEagerConnect()\n  \n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager || !!activatingConnector)\n  \n    function connect() {\n        setActivatingConnector(injected)\n        activate(injected)\n    }\n    \n    function disconnect() {\n      deactivate(injected)\n    }\n  return (\n  <div style={{ background:'radial-gradient(68.28% 53.52% at 50% 50%, #1c2a4f 0%, #111b35 100%)'}}>\n      <div style={{backgroundImage:'url(https://www.hegic.co/assets/img/background-image.svg)', height:'100vh'}}>\n          <Header connect={connect} disconnect={disconnect}/>\n          { active ? (\n            <Dashboard />\n          ) : (\n            <Intro connect={connect} />\n          )}\n          {/* <Stats /> */}\n      </div>\n  </div>\n\n  );\n}\n\n\nexport default () => (\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n  </Web3ReactProvider>\n)\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React()\n  \n    const [tried, setTried] = useState(false)\n  \n    useEffect(() => {\n      injected.isAuthorized().then((isAuthorized) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      })\n    }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n  \n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n      if (!tried && active) {\n        setTried(true)\n      }\n    }, [tried, active])\n  \n    return tried\n  }\n  \n  export function useInactiveListener(suppress = false) {\n    const { active, error, activate } = useWeb3React()\n  \n    useEffect(() => {\n      const { ethereum } = window\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\n        const handleConnect = () => {\n          console.log(\"Handling 'connect' event\")\n          activate(injected)\n        }\n        const handleChainChanged = (chainId) => {\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\n          activate(injected)\n        }\n        const handleAccountsChanged = (accounts) => {\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n          if (accounts.length > 0) {\n            activate(injected)\n          }\n        }\n        const handleNetworkChanged = (networkId) => {\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\n          activate(injected)\n        }\n  \n        ethereum.on('connect', handleConnect)\n        ethereum.on('chainChanged', handleChainChanged)\n        ethereum.on('accountsChanged', handleAccountsChanged)\n        ethereum.on('networkChanged', handleNetworkChanged)\n  \n        return () => {\n          if (ethereum.removeListener) {\n            ethereum.removeListener('connect', handleConnect)\n            ethereum.removeListener('chainChanged', handleChainChanged)\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\n          }\n        }\n      }\n    }, [active, error, suppress, activate])\n  }\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}